/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = true;
  ignore_case = true;
}

PARSER_BEGIN(Compilador)
package MiniLeng;

import Util.Simbolo;
import Util.Simbolo.Tipo_simbolo;
import Util.Simbolo.Tipo_variable;
import Util.Simbolo.Clase_parametro;

import Util.Tabla_Simbolos;
import Util.TablaHash;
import Util.RegistroExp;

import Util.TipoOperador;
import Util.TipoOperador.Tipo_Operador_Aditivo;
import Util.TipoOperador.Tipo_Operador_Multiplicativo;
import Util.TipoOperador.Tipo_Operador_Relacional;

import Exceptions.ErrorLexico;
import Exceptions.ErrorSemantico;
import Exceptions.ErrorSintactico;

import CodeGenerator.GeneradorCodigo;
import CodeGenerator.ASTNodo;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;

public class Compilador
{
  // IniCio del nivel de declaraciones anidadas
  public static int nivel = 0;

  // Variable de direccion por defecto a 0
  public static long dir = 0;

  public static Tabla_Simbolos tabla = new Tabla_Simbolos();

  public static void main(String args []) throws ParseException
  {
    /* nombre del fichero */
    String nombreArchivo;
    String path = "C:\\Users\\Gord\\Desktop\\programas\\";
    if (args [0].equals("-v"))
    {
      System.out.println("Compilacion en modo verbose");
      nombreArchivo = args [1];
    }
    else
    {
      System.out.println("Compilacion sin modo verbose");
      nombreArchivo = args [0];
    }
    /* Completar la ruta del path */
    path += nombreArchivo;
    System.out.println("LEYENDO FICHERO " + nombreArchivo + "\n");
    try
    {
      /* Crear el parser con respecto al fichero */
      Compilador parser = new Compilador(new java.io.FileInputStream(path));
      
      // Inicializacion de la tabla de simbolos
      tabla.inicializar_tabla();

      // Inicializador del generador de codigo
      GeneradorCodigo genCod = new GeneradorCodigo();
      
      int res = Compilador.programa(genCod);
      if (args [0].equals("-v"))
      {
        /* Mostrar total de tokens */
        TablaHash.mostrarTokensNormales();
        /* Mostrar total de identificadores */
        TablaHash.mostrarIdentificadores();
      }
      System.out.println("El fichero introducido es correcto");
    }
    catch (Exception e)
    {
      System.out.println("INCORRECTO");
      System.out.println(e.getMessage());
      Compilador.ReInit(System.in);
    }
    catch (Error e)
    {
      // Obtencion del error sintactico 
      int fila = CompiladorTokenManager.input_stream.getBeginLine();
      int columna = CompiladorTokenManager.input_stream.getBeginColumn();
      String tokenMalo = CompiladorTokenManager.input_stream.GetImage();
      ErrorLexico eL = new ErrorLexico(fila, columna, tokenMalo);
    }
  }
}

PARSER_END(Compilador)

SKIP : /* CARACTERES A IGNORAR */
{
  " "
| "\r"
| "\t"
| "\n"
| "%%" : ComentLinea
}

< ComentLinea >
SKIP :
{
  "%%" : DEFAULT
}

< ComentLinea >
MORE :
{
  < ~[ ] >
}

SPECIAL_TOKEN : /* Comentario de una linea */
{
  < SINGLE_LINE_COMMENT :
    "%" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
}

TOKEN : /* OPERADORES ARITMETICOS */
{
  < tPLUS : "+" >
  {
    TablaHash.anyadirHashTokens("tPLUS");
  }
| < tMINUS : "-" >
  {
    TablaHash.anyadirHashTokens("tMINUS");
  }
| < tMULTIPLY : "*" >
  {
    TablaHash.anyadirHashTokens("tMULTIPLY");
  }
| < tDIVIDE : "/" >
  {
    TablaHash.anyadirHashTokens("tDIVIDE");
  }
| < tMAYOR : ">" >
  {
    TablaHash.anyadirHashTokens("tMAYOR");
  }
| < tMENOR : "<" >
  {
    TablaHash.anyadirHashTokens("tMENOR");
  }
| < tIGUAL : "=" >
  {
    TablaHash.anyadirHashTokens("tIGUAL");
  }
| < tMAI : ">=" >
  {
    TablaHash.anyadirHashTokens("tMAI");
  }
| < tMEI : "<=" >
  {
    TablaHash.anyadirHashTokens("tMEI");
  }
| < tNI : "<>" >
  {
    TablaHash.anyadirHashTokens("tNI");
  }
| < tOPAS : ":=" >
  {
    TablaHash.anyadirHashTokens("tOPAS");
  }
}

TOKEN : /* OPERADORES LOGICOS */
{
  < tAND : "and" >
  {
    TablaHash.anyadirHashTokens("tAND");
  }
| < tOR : "or" >
  {
    TablaHash.anyadirHashTokens("tOR");
  }
| < tNOT : "not" >
  {
    TablaHash.anyadirHashTokens("tNOT");
  }
}

TOKEN : /* PALABRAS RESERVADAS */
{
  < tPROGRAMA : "programa" >
  {
    TablaHash.anyadirHashTokens("tPROGRAMA");
  }
| < tVAR : "var" >
  {
    TablaHash.anyadirHashTokens("tVAR");
  }
| < tPRINCIPIO : "principio" >
  {
    TablaHash.anyadirHashTokens("tPRINCIPIO");
  }
| < tFIN : "fin" >
  {
    TablaHash.anyadirHashTokens("tFIN");
  }
| < tSI : "si" >
  {
    TablaHash.anyadirHashTokens("tSI");
  }
| < tENT : "ent" >
  {
    TablaHash.anyadirHashTokens("tENT");
  }
| < tSI_NO : "si_no" >
  {
    TablaHash.anyadirHashTokens("tSI_NO");
  }
| < tFSI : "fsi" >
  {
    TablaHash.anyadirHashTokens("tFSI");
  }
| < tMQ : "mq" >
  {
    TablaHash.anyadirHashTokens("tMQ");
  }
| < tFMQ : "fmq" >
  {
    TablaHash.anyadirHashTokens("tFMQ");
  }
| < tESCRIBIR : "escribir" >
  {
    TablaHash.anyadirHashTokens("tESCRIBIR");
  }
| < tLEER : "leer" >
  {
    TablaHash.anyadirHashTokens("tLEER");
  }
| < tMOD : "mod" >
  {
    TablaHash.anyadirHashTokens("tMOD");
  }
| < tDIV : "div" >
  {
    TablaHash.anyadirHashTokens("tDIV");
  }
| < tENTERO : "entero" >
  {
    TablaHash.anyadirHashTokens("tENTERO");
  }
| < tBOOLEANO : "booleano" >
  {
    TablaHash.anyadirHashTokens("tBOOLEANO");
  }
| < tCARACTER : "caracter" >
  {
    TablaHash.anyadirHashTokens("tCARACTER");
  }
| < tTRUE : "true" >
  {
    TablaHash.anyadirHashTokens("tTRUE");
  }
| < tFALSE : "false" >
  {
    TablaHash.anyadirHashTokens("tFALSE");
  }
| < tENTACAR : "entacar" >
  {
    TablaHash.anyadirHashTokens("tENTACAR");
  }
| < tCARAENT : "caraent" >
  {
    TablaHash.anyadirHashTokens("tCARAENT");
  }
| < tACCION : "accion" >
  {
    TablaHash.anyadirHashTokens("tACCION");
  }
| < tVAL : "val" >
  {
    TablaHash.anyadirHashTokens("tVAL");
  }
| < tREF : "ref" >
  {
    TablaHash.anyadirHashTokens("tREF");
  }
}

TOKEN : /*EXPRESIONES */
{
  < #tDIGITO : [ "0"-"9" ] >	
| < #tLETRA : [ "a"-"z" ] >
| < tCONSTCHAR : ("\"") (~[ "\"" ]) ("\"") >
  {
    TablaHash.anyadirHashTokens("tCONSTCHAR");
  }
| < tCONSTCAD : ("\"") (~[ "\"" ])+ ("\"") >
  {
    TablaHash.anyadirHashTokens("tCONSTCAD");
  }
| < tCONSTANTE_NUMERICA : (< tDIGITO >)+ >
  {
    TablaHash.anyadirHashTokens("tCONSTANTE_NUMERICA");
  }
| < tIDENTIFICADOR :
    (
      < tLETRA >
    |
      (
        (
          < tLETRA >
        | "_"
        )
        (
          < tLETRA >
        | "_"
        | < tDIGITO >
        )*
        (
          < tLETRA >
        | < tDIGITO >
        )
      )
    ) >
  {
    TablaHash.anyadirHashTokens(image.toString());
    TablaHash.anyadirHashIdentificadores(image.toString());
  }
}

TOKEN : /* OPERADORES SEPARADDORES */
{
  < tPUNTYCOM : ";" >
  {
    TablaHash.anyadirHashTokens("tPUNTYCOM");
  }
| < tCOMA : "," >
  {
    TablaHash.anyadirHashTokens("tCOMA");
  }
| < tPARENTESIS_IZDA : "(" >
  {
    TablaHash.anyadirHashTokens("tPARENTESIS_IZDA");
  }
| < tPARENTESIS_DCHA : ")" >
  {
    TablaHash.anyadirHashTokens("tPARENTESIS_DCHA");
  }
}

/* Construccion del analizador sintactico */

// Regla de programa
int programa(GeneradorCodigo genCod) :
{
  Token tSim, t;
  Simbolo s;
  Simbolo.Tipo_simbolo tp_Sim;
  int total_variables = 0;
  ASTNodo acciones = null, sentencias = null;
}
{
  try
  {
    // Lectura del token programa
    < tPROGRAMA > 
    // Guardado del nombre del programa
    t = < tIDENTIFICADOR >
    {
      // Guardar nombre del programa
      genCod.setNombre_prog(t.image);

      // Iniciar direccion de pila
      genCod.setDireccionInicial();
    }
    // Lectura del resto de datos
    < tPUNTYCOM >
    total_variables = declaracion_variables(genCod)
    {
      // Insertar en la tabla de simbolos el token del programa
      // no se comprueba porque es el primero
      s = tabla.introducir_programa(t.image, 2 + total_variables);
      genCod.setOSF_s(2 + total_variables);
    }
    acciones = declaracion_acciones(genCod)
    sentencias = bloque_sentencias(genCod) < EOF >
    {
      // Comprobar que el programa esta bien estructurado
      if (genCod.getErroresLex() == 0 && genCod.getErroresSem() == 0 && genCod.getErroresSint() == 0) {
        	    
	    // Generar código del inicio del programa
	    genCod.codigo.escribir(";Programa " + t.image + ".");
	    genCod.codigo.escribir("\tENP L0");
	    
		// Generar código de las acciones
		genCod.codigo.escribir("\n;Acciones");
		genCod.codigo.escribir(acciones);
		
	    // Generar código del programa principal		
	    genCod.codigo.escribir("\n;Comienzo del programa " + t.image + ".\n");
	    genCod.codigo.escribir("L0:");  
		genCod.codigo.escribir(sentencias);
		
		// Fin del programa
	    genCod.codigo.escribir("\n;Fin de programa " + t.image + ".\n");
	    genCod.codigo.escribir("\tLVP");
	    genCod.codigo.cerrar();
	  }
	  // El programa funciona correctamente y devuelve 0
      return 0;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
    return 1;
  }
}

// Regla de bloque_sentencias OK
ASTNodo bloque_sentencias(GeneradorCodigo genCod) :
{
  // Declaracion de variables
  Token t;
  ASTNodo result = null;
}
{
  try
  {
    < tPRINCIPIO > result = lista_sentencias(genCod) t = < tFIN >
    {
      // Ocultar los parametros del nivel actual
      tabla.ocultar_parametros(nivel);

      return result;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de lista_sentencias OK EN DUDA
ASTNodo lista_sentencias(GeneradorCodigo genCod) :
{
  ASTNodo resul = new ASTNodo();
  ASTNodo aux = null;
  LinkedList<ASTNodo> sentencias = new LinkedList<ASTNodo>();
  boolean ok = true;
}
{
  try
  {
    // El bloque de sentencias tiene mas de una 
    (
      aux = sentencia(genCod)
	  {
	    if (aux == null)
	    {
	      ok = false;
	    }
	    else
	    {
	      sentencias.add(aux);
	    }
	  }
      ) +
      {
        if (ok)
        {
           aux = resul;
           for(ASTNodo sentencia : sentencias) {
				aux.setSiguiente(sentencia);
				aux=sentencia;
	       }
	       resul = resul.getSiguiente();
        }
        else
        {
            resul = null;
        }
        return resul;
     }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de sentencia OK
ASTNodo sentencia(GeneradorCodigo genCod) :
{
  ASTNodo resultado = null;
}
{
  try
  {
    resultado = leer(genCod) < tPUNTYCOM >
    {
    	return resultado;
  	}
  	| resultado = escribir(genCod) < tPUNTYCOM >
  	{
    	return resultado;
  	}
  	| resultado = asig_invoc(genCod)
  	{
    	return resultado;
  	}
  	| resultado = seleccion(genCod)
  	{
    	return resultado;
  	}
  	| resultado = mientras_que(genCod)
  	{
    	return resultado;
  	}
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

ASTNodo asig_invoc(GeneradorCodigo genCod) :
{
  // Declaracion de variables
  Token t;
  ASTNodo result = new ASTNodo();
}
{
  try
  {
    // Pasar el token capturado como identificador a la invocacion de la accion
    t = < tIDENTIFICADOR >
    (
       result = asignacion(t, genCod)
       {
         return result;
       }
     | result = invocacion_accion(t, genCod)
	   {
		return result;  
	   }
    )
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de asignacion OK
ASTNodo asignacion(Token t, GeneradorCodigo genCod) :
{
  // Declaracion de variables
  RegistroExp tpExp;
  Simbolo s;
  Simbolo.Tipo_variable tipo = null;
  boolean ok = true;

  ASTNodo = null;
}
{
  try
  {
    < tOPAS >
    {

       // Se busca el simbolo en la tabla de simbolos
       s = tabla.buscar_simbolo(t.image);
       // el simbolo se ha encontrado bien

       if (s == null)
       {
          // Excepcion de simbolo no encontrado
       	  ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Variable desconocida " + t.image + 
          " en la parte izquierda de la asignacion");
         // Tipo de simbolo desconocido
         tipo = Simbolo.Tipo_variable.DESCONOCIDO;
         ok = false;
       }
       else if (s.es_Simbolo_Parametro() && s.es_Parametro_Valor())
       {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Prohibido asignar a " + s.getNombre() +  
          ", es un parametro pasado como valor");
          // Tipo de simbolo desconocido
          tipo = Simbolo.Tipo_variable.DESCONOCIDO;
          ok = false;
       }
       else if (s.es_Simbolo_Accion())
       {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        ", columna " + token.beginColumn + "  - Prohibida la asignacion a la accion " + s.getNombre());
          // Tipo de simbolo desconocido
          tipo = Simbolo.Tipo_variable.DESCONOCIDO;
          ok = false;
       }
       else
       {
          tipo = s.getVariable();
       }      
    }
    // Procesamiento de la expresion
    tpExp = expresion() < tPUNTYCOM >
    {
      
      if (ok && tpExp.getTipo() != tipo && tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO)
      {
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Tipos incompatibles en la asignacion: " +
        	"no se puede convetir " + tpExp.getTipo().toString() + " a " + tipo.toString());
      }
      else if (ok)
      {
        // Insertar nodo ASG en AST (Left: variable, Right: expresion)
		nodo = new ASTNodo();
		nodo.setTipo(ASTNodo.TipoNodo.ASG);
		nodo.setNivel(nivel);
		nodo.setIzquierda(new ASTNodo(t.image, s.getNivel(), s.getDir()));
		nodo.getIzquierda().setTipoParametro(s.getParametro());
		nodo.setRight(r.nodoAST);
      }
      return nodo;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de lista_asignables OK
void lista_asignables() :
{
  //Declaracion de variables
  LinkedList < String > listaIdentificadores;
  // identificador a evaluar
  String idActual;

  ASTNodo aux = null, resul = new ASTNodo("rd", nivel, ASTNodo.TipoNodo.RD);
}
{
  try
  {
    // Retorno de la lista de identificadores
    listaIdentificadores = identificadores()
    {
      // Tamaño de la lista de identificadores
      int dimension = listaIdentificadores.size();
      // Simbolo a evaluar
      Simbolo s;
      // Recorrido de la lista 
      for (int i = 0; i < dimension; i++)
      {
        // obtencion del i-esimo identificador
        idActual = listaIdentificadores.get(i);
       
        // Busqueda del simbolo en la tabla de simbolos
        s = tabla.buscar_simbolo(idActual);
        
        if (s == null)
        {
           ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Identificador de asignacion "
           								+ idActual + " desconocido");
        }
        else if (s.getTipo() == Simbolo.Tipo_simbolo.VARIABLE
        || s.getVariable() == Simbolo.Tipo_variable.DESCONOCIDO)
    	{
    	  // es variable o desconocido
    	  if (s.es_Variable_Booleano() || s.es_Variable_Cadena())
    	  { 
           // Error semantico en la lista de asignables
           ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Tipo invalido de variable de lectura, se espera " +
           											"entero o caracter");
          }
        }
        else if (s.es_Simbolo_Parametro() && s.es_Parametro_Valor())
        {
            // Error semantico en la lista de asignables
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Variable " + s.getNombre() +
            										" por valor en lectura");
        }
        else if (s.es_Simbolo_Accion())
        {
           // Error semantico en la lista de asignables
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Los argumentos de una funcion solo pueden ser" +
            	" parametros o variables, encontrado " + s.getNombre() + " de tipo " + s.getTipo().toString());
        }
        else {
          ok = true;
        }	
      }      
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de leer OK
ASTNodo leer(GeneradorCodigo genCod) :
{
  ASTNodo nodo_leer = null;
}
{
  try
  {
    < tLEER >
    < tPARENTESIS_IZDA > nodo_leer = lista_asignables(genCod) < tPARENTESIS_DCHA >
    {
      return nodo_leer;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de escribir OK
ASTNodo escribir(GeneradorCodigo genCod) :
{
  ASTNodo resul = null;
}
{
  try
  {
    < tESCRIBIR > < tPARENTESIS_IZDA > resul = lista_escribibles() < tPARENTESIS_DCHA >
    {
      return resul;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de lista_escribibles OK
void lista_escribibles() :
{
}
{
  try
  {
    escribible() (< tCOMA > escribible()) *
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de lista_escribibles OK
void escribible() :
{
  // Declaracion de variables
  Token t = null;
  Simbolo s;
  RegistroExp regExp = null;
  RegistroExp result = new RegistroExp();
  boolean constCad = false, entCad = false;
}
{
  try
  {
    (
    t = < tCONSTCHAR >
    {
      constCad = true;
    }
  | t = < tCONSTCAD >
    {
      constCad = true;
    }
  | t = < tIDENTIFICADOR >
  | < tENTACAR > < tPARENTESIS_IZDA > regExp = expresion() < tPARENTESIS_DCHA >
  	{
  	  entCad = true;
  	}
	)
	{
	  if (constCad)
	  {
	    // La expresion es una cadena
	    result.setTipo(Simbolo.Tipo_variable.CADENA);
	  }
	  else if (entCad)
	  {
	    if (regExp.getTipo() != Simbolo.Tipo_variable.ENTERO)
	    {
	      ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Se esperaba una expresion del tipo" +
	       					" ENTERO en la funcion entacar. Se ha recibido una expresion de tipo " +
	       					  regExp.getTipo().toString());
	    }
	    else
	    {
	    	result.setTipo(Simbolo.Tipo_variable.ENTERO);
	    }
	  }
	  else
	  {
	      // Lo busca bien el token en la tabla de simbolos
	      s = tabla.buscar_simbolo(t.image);
		  if (s == null)
		  {
		    ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Variable a escribir " + s.getNombre()
		    											+ " desconocida ");
		  }
	      else if (s.es_Variable_Desconocido())
	      {
	         ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Variable " + t.image + " no valida para escritura");
	      }
	      // Controlar despues los BOOLEANOS
	   }
	 }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de invocacion accion OK
ASTNodo invocacion_accion(Token t, GeneradorCodigo genCod) :
{
  // Declaracion de variables
  Simbolo s = null;
  boolean args = false;
  ASTNodo resul = null, argsAST = null;
}
{
  try
     {
	     {
	      // Busqueda del simbolo en la tabla
	      s = tabla.buscar_simbolo(t.image);
	      if (s == null)
	      {
	        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Identificador " + t.image +
	        											" desconocido en llamada a accion");
	      }
	      // Busqueda con exito en la tabla de simbolos
	      else if (!s.es_Simbolo_Accion())
	      {
	         // error al invocar la accion
	         ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - No se puede realizar una llamada" + 
	          " a una accion sobre el parametro " + t.image);
	      }
	      else
	      {
	        resul = new ASTNodo(s.getNombre(), nivel, ASTNodo.TipoNodo.INVOCACION);
            resul.setCond(new ASTNodo(s.getEtiqueta(), g.OSF_s));
            resul.getCond().setNivel(s.getNivel());
	      }
	     }
	     // Continuacion de evaluacion de la expresion
	     (argsAST = argumentos(s, genCod)
	     {
	      args = true;
	     }
	     ) ? < tPUNTYCOM >
	     {
	      // Si la accion no existe
	      if (s != null)
	      { 
	      	// Comprobar el numero de parametros en caso de que se llame sin ninguno
	      	int argc = s.getLista_parametros().size();
	      	if (!args && argc != 0)
	      	{
	        	// Error por falta de parametros
	        	ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + " -  Se esperaban " + argc +
	        	" parametros al invocar a la accion " + s.getNombre());
	      	}
	      	else if (args && ok)
	      	{
	      	    // Invertir los argumentos para crear estructura de pila
	      	  	resul.setLeft(argsAST);
				resul.getCond().setValor(s.getDir());
	      	}
	      }
	      return resul;
	   }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

//Regla de mientras que OK
ASTNodo mientras_que(GeneradorCodigo genCod) :
{
  // Declaracion de variables
  RegistroExp tpExp;
  ASTNodo nodoWhile = null, sentencias;
}
{
  try
  {
    < tMQ > tpExp = expresion()
    {
      ok = tpExp.getTipo() != Simbolo.Tipo_variable.BOOLEANO;
      
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO) && ok)
      {
        // Error en la condicion del mientras que
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + " - La condicion de mientras_que debe ser booleana");
      }
      if (ok)
      {
        nodoWhile = new ASTNodo("while", nivel, ASTNodo.TipoNodo.WHILE);
		nodoWhile.setCond(tpExp.nodoAST);
      }
    }
    sentencias = lista_sentencias(genCod) 
    < tFMQ >
    {
		nodoWhile.setRight(sentencias);
		return nodoWhile;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla para los argumentos OK
ASTNodo argumentos(Simbolo s, GeneradorCodigo genCod) :
{
  //Declaracion de variables
  boolean ok = false;
  ASTNodo resul = null;
}
{
  try
  {
    < tPARENTESIS_IZDA > ( resul = lista_expresiones(s, gendCod)
    {
      // Captura bien la expresion
      ok = true;
    }
    ) ? < tPARENTESIS_DCHA >
    {
       // Comprobar los parametros de la invocacion en caso de que
       // se invoque con parametros distintos
	   if (s != null)
	   {
		   // Si la accion existe
           int argc = s.getLista_parametros().size();
      	
      	   if (!ok && argc != 0)
      	   {
        		// Error de invocacion de parametros
        		ErrorSemantico ESM = new ErrorSemantico("linea " + token.beginLine + 
        		" - Se esperaban " + argc + " parametros al invocar a la accion " + 
        		s.getNombre());
        		
        		resul = null;
        	}
        	return resul;
        }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de lista de expresiones
ASTNodo lista_expresiones(Simbolo s, GeneradorCodigo genCod) :
{
  // Declaracion de variables
  RegistroExp r;
  int argc = 0;
  boolean ok = true;
  LinkedList < Simbolo > parametros;
  ASTNodo aux = null, resul = null;
}
{
  try
  {
    // Captura de la primera expresion
    r = expresion()
    {
      if (s != null && !s.es_Variable_Desconocido())
      {
        // Obtencion de la lista de parametros de la accion
        parametros = s.getLista_parametros();

        argc++;

        // Numero de parametros incorrecto
        if (argc > parametros.size())
        {
          ErrorSemantico eMS = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - El numero de parametros de" + 
          " llamada a la funcion " + s.getNombre() + 
          " no coindice, se esperaban " + parametros.size());
          ok = false;
        }
        else if (r.getTipo() != parametros.get(argc - 1).getVariable())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Los tipos en la llamada a la funcion " + 
          s.getNombre() + " no coindicen");
          ok = false;
        }
        else if (r.getClase() == Simbolo.Clase_parametro.VAL && !parametros.get(argc - 1).es_Parametro_Valor())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Error al pasar un parametro por valor como referencia");
          ok = false;
        }
        else if (parametros.get(argc - 1).es_Parametro_Referencia() && r.isExpr_compuesta())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - No se puede pasar al parametro por referencia " +
	        	parametros.get(argc - 1).getNombre () + " una expresion compuesta");
          ok = false;
        }
        else
        {
           r.nodoAST.setTipoParam(parametros.get(num_params-1).getParametro());
		   resul = r.nodoAST;
		   resul.setTipoParam(parametros.get(num_params-1).getParametro());
        }
      }
      else
      {
        // Todo ha ido bien
        ok = false;
      }    	
    }
    (
    < tCOMA > 
    // Procesamiento de la nueva expresion
    r = expresion()
    {
      if (s != null && !s.es_Variable_Desconocido())
      {
        // Obtencion de la lista de parametros de la accion
        parametros = s.getLista_parametros();
        argc++;
        // Numero de parametros incorrecto
        if (argc > parametros.size())
        {
          ErrorSemantico eMS = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - El numero de parametros de" + 
          		" llamada a la funcion " + s.getNombre() + 
          		" no coindice, se esperaban " + parametros.size());
          ok = false;
        }
        // Comprobacion de los tipos en la funcion AQUI ESTAMOS
        else if (r.getTipo() != parametros.get(argc - 1).getVariable())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Los tipos en la llamada a la funcion" + 
          		s.getNombre() + " no coindicen");
          ok = false;
        }
        else if (r.getClase() == Simbolo.Clase_parametro.VAL && !parametros.get(argc - 1).es_Parametro_Valor())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Error al pasar un parametro por valor como referencia");
          ok = false;
        }
        else if (parametros.get(argc - 1).es_Parametro_Referencia() && r.isExpr_compuesta())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - No se puede pasar al parametro por referencia " +
	        	parametros.get(argc - 1).getNombre () + " una expresion compuesta");
          ok = false;
        }
        else
        {
          r.nodoAST.setTipoParam(parametros.get(num_params-1).getParametro());
		  aux = resul;
		  resul = r.nodoAST;
		  resul.setTipoParam(parametros.get(num_params-1).getParametro());
		  resul.setLeft(aux);
        }
      }
      else
      {
         // Todo ha ido bien
         ok = false;
      }
    }
    ) *
    {
      if (ok && s != null)
      {
        // Añadimos a Cond un nodo con los datos de la accion (etiqueta, num parametros y nivel)
	    // Se añade siempre al inicio, dejando la primera expresion al final
	    resul.setCond(new ASTNodo(s.getEtiqueta(), s.getDir()));
	    resul.getCond().setNivel(s.getNivel());
	    
		// Comprobar que los parametros de llamada a la funcion coindicen con los de la tabla
		if (s.getNum_params() != num_params) {
			miniLeng.error_semantico("El número de parámetros de llamada a la función " + s.getNombre() + " no coindice, se esperaban " + parametros.size(), token, g);
			resul = null;
		}
      }
      return resul;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de expresion OK
RegistroExp expresion(GeneradroCodito genCod) :
{
  // Declaracion de expresiones a analizar
  RegistroExp tpExp1 = null, tpExp2 = null;
  TipoOperador op;
  boolean ok = true;
  RegistroExp regResult = new RegistroExp();
  boolean constantes = false, anidar = false;

  ASTNodo aux = null;
}
{
  try
  {
    {
      resul.nodoAST = new ASTNodo("op", nivel);
    }
    // Obtencion de la primera expresion
    tpExp1 = expresion_simple(genCod)
    (op = operador_relacional(genCod)
     // Obtencion de la segunda expresion
    tpExp2 = expresion_simple(genCod)
    {
      // Evaluacion de la expresion
      // Resultado de evaluar la expresion
      regResult = new RegistroExp();

      // Evaluar primer termino de la expresion
      if (tpExp1.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
      {
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - El operador 1 debe ser entero " + 
        		"caracter, cadena o booleano");
        ok = false;
      }
      // Evaluar segundo termino de la expresion
      if (tpExp2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
      {
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - El operador 2 debe ser entero " + 
        		"caracter, cadena o booleano");
        ok = false;
      }
      // Comprobar que todo ha ido bien y evaluar la expresion
      if (ok)
      {
        // Verficar que los dos operandos son del mismo tipo
        if (tpExp1.getTipo() != tpExp2.getTipo())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Los operadores deben ser del mismo tipo " +
	        	" en la expresion " + tpExp1.getTipo().toString() + " : " + tpExp2.getTipo().toString());

	      regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          // Tipo de la nueva expresion
          regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
        	
          // Evaluacion del tipo de la expresion
          switch (tpExp1.getTipo())
          {
            // La expresion puede ser entera
            case ENTERO : 
            // Comprobar que la segunda expresion es tambien entera
            ok = tpExp2.getTipo() == Simbolo.Tipo_variable.ENTERO;
            
            // Tipo de la nueva expresion
            regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
            
            if (!ok)
            {
              // Resul tiene tipo DESCONOCIDO porque no coinciden
              regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            }
            // Son constantes
            else if (tpExp1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
            	&& tpExp2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
			  constantes = true;
              regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);             
              switch (op.getOperadorRelacional())
              {
                case MAYOR :
                regResult.valorBool = tpExp1.valorEnt > tpExp2.valorEnt;
                break;
                case MAYOR_IGUAL :
                regResult.valorBool = tpExp1.valorEnt >= tpExp2.valorEnt;
                break;
                case IGUAL : 
                regResult.valorBool = tpExp1.valorEnt == tpExp2.valorEnt;
                break;
                case NO_IGUAL :
                regResult.valorBool = tpExp1.valorEnt != tpExp2.valorEnt;
                break;
                case MENOR_IGUAL : 
                regResult.valorBool = tpExp1.valorEnt <= tpExp2.valorEnt;
                break;
                case MENOR : 
                regResult.valorBool = tpExp1.valorEnt < tpExp2.valorEnt;
                break;
                default : 
                break;
              }
            }
            break;
            case CHAR:
            // Cmprobar que la segunda expresion es una cadena

            // El tipo es booleano
	        regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
	        
            ok = tpExp2.getTipo() == Simbolo.Tipo_variable.CHAR;
            if (!ok)
            {
              regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            }
            // Los datos son constantes y se puede trabajar
            else if (tpExp1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
            	&& tpExp2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
              	  constantes = true;
				  switch (op.getOperadorRelacional())
	              {
	                case IGUAL :
	                regResult.valorBool = tpExp1.valorString.equals(tpExp2.valorString);
	                break;
	                case NO_IGUAL :                                        
	                regResult.valorBool = !tpExp1.valorString.equals(tpExp2.valorString);
	                break;
	                default :           
	                ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        			", columna " + token.beginColumn + "  - No se puede" + 
	                	" utilizar el operador relacional " + op.getOperadorRelacional().toString() +
	                	" sobre caracteres");
	              }             
            }
            break;
            case BOOLEANO : 
            // Cmprobar que la segunda expresion es una cadena

            // El tipo es booleano
	        regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
	        
            ok = tpExp2.getTipo() == Simbolo.Tipo_variable.BOOLEANO;
            if (!ok)
            {
              regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            }
            else if(tpExp1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
            	&& tpExp2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
              constantes = true;
              // Son constantes
              switch (op.getOperadorRelacional())
              {
                case IGUAL : 
                regResult.valorBool = tpExp1.valorBool == tpExp2.valorBool;
                break;
                case NO_IGUAL : 
                regResult.valorBool = tpExp1.valorBool != tpExp2.valorBool;
                break;
                default : 
                ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        		", columna " + token.beginColumn + "  - No se puede" + 
                	" utilizar el operador " + op.getOperadorRelacional().toString() +
                	" sobre una booleano");
              }
            }
            break;
            case DESCONOCIDO : 
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            break;
            default : 
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - El operador relacional es" + 
            	" desconocido");
          }
          
          resul.nodoAST = new ASTNodo("bool", nivel, ASTNodo.TipoNodo.CONST);
          resul.nodoAST.setValor(((resul.valorBool) ? 1 : 0));
		  resul.nodoAST.setTipoVar(Simbolo.TipoVariable.BOOLEANO);
        }
        if (ok && !constantes)
        {
          // Es expresion compuesta
          regResult.setExpr_compuesta(true);

          if(!anidar){
  	  	  	miniLeng.createSubTreeAST(resul.nodoAST, r1.nodoAST, r2.nodoAST, ASTNodo.TipoNodo.OP,op);
  	  	  	aux = resul.nodoAST;
  	  	  	anidar = true;
  	  	  }
  	  	  else{
  	  	    resul.nodoAST = new ASTNodo("op", g.nivel);
  	  	  	miniLeng.createSubTreeAST(resul.nodoAST, aux, r2.nodoAST, ASTNodo.TipoNodo.OP,op);
			aux = resul.nodoAST;
  	  	  }
        }
      }
    }
    ) *
    {
      // Comprobar que la expresion es compuesta
      if (tpExp2 == null)
      {
        return tpExp1;
      }
      else
      {
        return regResult;
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de operador_relacional OK
TipoOperador operador_relacional():
{
  // Declaracion de variables
  TipoOperador op = new TipoOperador();
}
{
  try
  {
    {
      
    }
    < tIGUAL >
    {
      // Es el operador =
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.IGUAL);
      return op;
    }
  | < tMENOR >
    {
      // Es el operador <
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MENOR);
      return op;
    }
  | < tMEI >
    {
      // Es el operador <=
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MENOR_IGUAL);
      return op;
    }
  | < tNI >
    {
      // Es el operador <>
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.NO_IGUAL);
      return op;
    }
  | < tMAI >
    {
      // Es el operador >=
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MAYOR_IGUAL);
      return op;
    }
  | < tMAYOR >
    {
      // Es el operador >
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MAYOR);
      return op;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla operador aditivo OK
TipoOperador operador_aditivo() :
{
  // Declaracion de variables
  TipoOperador op = new TipoOperador();
}
{
  try
  {
    < tPLUS >
    {
      // El operador es una suma
      op.setOperadorAditivo(TipoOperador.Tipo_Operador_Aditivo.SUMA);
      return op;
    }
  | < tMINUS >
    {
      // El operaodr es una resta
      op.setOperadorAditivo(TipoOperador.Tipo_Operador_Aditivo.RESTA);
      return op;
    }
  | < tOR >
    {
      // El operador es un OR
      op.setOperadorAditivo(TipoOperador.Tipo_Operador_Aditivo.OR);
      return op;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// regla de expresion simple OK
RegistroExp expresion_simple() :
{
  // Declaracion de variables
  RegistroExp regTerm1 = null, regTerm2 = null, regResult = null;
  TipoOperador op;
  boolean ok;
  boolean constantes = false, anidar = false;
}
{
  try
  {
    {
      resul.nodoAST = new ASTNodo("op", nivel);
    }
    // Primer termino de la expresion
    regTerm1 = termino()
    (
    // Operador de la expresion
    op = operador_aditivo() 
    // Segundo termino de la expresion
    regTerm2 = termino()
    {
      // Resultado de evaluar la expresion
      regResult = new RegistroExp();
      ok = true;
      // Evaluar el simbolo introducido
      if (op.getOperadorAditivo() == TipoOperador.Tipo_Operador_Aditivo.OR)
      {
        // Comprobar que son los dos booleanos
        ok = regTerm1.getTipo() == Simbolo.Tipo_variable.BOOLEANO 
        && regTerm2.getTipo() == Simbolo.Tipo_variable.BOOLEANO;
        if (!ok)
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " +
          					regTerm1.getTipo().toString() + " y " + regTerm2.getTipo().toString());
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          // Comprobar que son desconocidos
          if (regTerm1.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO 
          || regTerm2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
          {
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
          }
          else
          {
            // Son los dos booleanos
            regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);

			// Si son constantes calculamos la expresion
            if (regTerm1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
            	&& regTerm2.getSimbolo() != Simbolo.Tipo_simbolo.CONST)
            {
                constantes = true;
              	regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
            	regResult.valorBool = regTerm1.valorBool | regTerm2.valorBool;
            	
                regResult.nodoAST = new ASTNodo("bool", nivel, ASTNodo.TipoNodo.CONST);
                regResult.nodoAST.setValor(((regResult.valorBool) ? 1 : 0));
				regResult.nodoAST.setTipoVar(Simbolo.Tipo_variable.BOOLEANO);
            }
          }
        }
      }
      // No es operador OR
      else
      {
        // Comprobar que son los dos enteros
        
        ok = regTerm1.getTipo() == Simbolo.Tipo_variable.ENTERO
        && regTerm2.getTipo() == Simbolo.Tipo_variable.ENTERO;
        if (!ok)
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " +
          					regTerm1.getTipo().toString() + " y " + regTerm2.getTipo().toString());
          					
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        // Comprobar que no son desconocidos
        else if (regTerm1.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO 
        && regTerm2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
        {
          // El resultado es desconocido
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          // La expresion final es entera
          regResult.setTipo(Simbolo.Tipo_variable.ENTERO);
          if (ErrorSemantico.hayDesbordamientoEntero(regTerm1.getValorEnt()) 
          || ErrorSemantico.hayDesbordamientoEntero(regTerm2.getValorEnt()))
          {
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Valor fuera del rango");
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
          }
          else
          {
            // Comprobar que son constantes
            if (regTerm1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
            	&& regTerm2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
                constantes = true;
              	regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
	            switch (op.getOperadorAditivo())
	            {
	              case SUMA :	             
	              regResult.valorEnt = regTerm1.valorEnt + regTerm2.valorEnt;
	              break;
	              case RESTA : 
	              regResult.valorEnt = regTerm1.valorEnt - regTerm2.valorEnt;
	              break;
	              default : 
	              ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Operador aditivo desconocido");
	            }

	            regResult.nodoAST = new ASTNodo("", nivel, ASTNodo.TipoNodo.CONST);
				regResult.nodoAST.setValor(regResult.valorEnt);
				regResult.nodoAST.setTipoVar(regResult.tipoVar);
	        }
          }
        }
      }
      if (ok && !constantes)
      {
        regResult.setExpr_compuesta(true);
        if(!anidar)
        {
  	  	  	miniLeng.createSubTreeAST(resul.nodoAST, r1.nodoAST, r2.nodoAST, ASTNodo.TipoNodo.OP,op);
  	  	  	aux = resul.nodoAST;
  	  	  	anidar = true;
  	  	}
  	  	else
  	  	{
  	  	    regResult.nodoAST = new ASTNodo("op", nivel);
  	  	  	miniLeng.createSubTreeAST(regResult.nodoAST, aux, r2.nodoAST, ASTNodo.TipoNodo.OP, op);
			aux = regResult.nodoAST;
  	  	}  
      }
    }
    ) *
    {
      // Comprobar que la expresion simple es compuesta
      if (regTerm2 == null)
      {
        return regTerm1;
      }
      else
      {
        return regResult;
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// LOS OPERADORES SON AND Y ESAS MIERDAS EH
// Regla de termino OK
RegistroExp termino() :
{
  // Declaracion de factores y expresiones
  RegistroExp tpFactor1 = null, tpFactor2 = null, regResult = null;
  // Declaracion del operador
  TipoOperador op;
  boolean ok;
  boolean constantes = false, anidar = false;

  ASTNodo aux = null, ultimo = null;
}
{
  try
  {
    {
      resul.nodoAST = new ASTNodo("op", nivel);
    }
    // Evaluacion del primer factor
    tpFactor1 = factor()
    (
    // Evaluacion del operador multiplicativo
    op = operador_multiplicativo() 
    // Evaluacion del segundo factor
    tpFactor2 = factor()
    {
      regResult = new RegistroExp();
      // El operaodr es una AND
      if (op.getOperadorMultiplicativo() == TipoOperador.Tipo_Operador_Multiplicativo.AND)
      {
        // Comprobar que son los dos booleanos
        ok = tpFactor1.getTipo() == Simbolo.Tipo_variable.BOOLEANO 
        && tpFactor2.getTipo() == Simbolo.Tipo_variable.BOOLEANO;
        if (!ok)
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " +
          					tpFactor1.getTipo().toString() + " y " + tpFactor2.getTipo().toString());
          					
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else if (tpFactor2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO 
        || tpFactor2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
        {
          // El resultado es desconocido
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
          
          if (tpFactor1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
          	 && tpFactor2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
          {
			// Hacer operacion AND
          	regResult.valorBool = tpFactor1.valorBool & tpFactor2.valorBool;
            regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
            regResult.nodoAST = new ASTNodo("", nivel, ASTNodo.TipoNodo.CONST);
            regResult.nodoAST.setValor(((resul.valorBool) ? 1 : 0));
			regResult.nodoAST.setTipoVar(Simbolo.TipoVariable.BOOLEANO);
          }
        }
      }
      else
      {
        // Es un operador multiplicativo distinto de AND
        ok = tpFactor1.getTipo() == Simbolo.Tipo_variable.ENTERO 
        && tpFactor2.getTipo() == Simbolo.Tipo_variable.ENTERO;
        if (!ok)
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " +
          					tpFactor1.getTipo().toString() + " y " + tpFactor2.getTipo().toString());
          					
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          regResult.setTipo(Simbolo.Tipo_variable.ENTERO);
          if (ErrorSemantico.hayDesbordamientoEntero(tpFactor1.valorEnt) 
          || ErrorSemantico.hayDesbordamientoEntero(tpFactor2.valorEnt))
          {
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Valor fuera del rango");
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
          }
          else
          {
            // Comprobar que son constantes para operar
            if (tpFactor1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
            	&& tpFactor2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
				constantes = true;          
              	// El resultado tambien es constante
              	regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
              	
	            switch (op.getOperadorMultiplicativo())
	            {
	              case MULTIPLICACION : 
	              regResult.valorEnt = tpFactor1.valorEnt * tpFactor2.valorEnt;
	              break;
	              case DIVISION : 
	              if (tpFactor2.valorEnt == 0)
	              {
	                ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Division por 0");					
	                regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);				
	              }
	              else
	              {
	                regResult.valorEnt = tpFactor1.valorEnt / tpFactor2.valorEnt;
	              }
	              break;
	              case MOD : 
	              if (tpFactor2.valorEnt == 0)
	              {
	                ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Modulo por 0");					
	                regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);		
	              }
	              else
	              {
	                regResult.valorEnt = tpFactor1.valorEnt % tpFactor2.valorEnt;
	              }
	              break;
	              default : 
	              ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Operador multiplicativo desconocido");					
	            }

	            regResult.nodoAST = new ASTNodo("", g.nivel, ASTNodo.TipoNodo.CONST);
				regResult.nodoAST.setValue(regResult.valorEnt);
				regResult.nodoAST.setTypeVar(regResult.tipoVar);
	         }
          }
        }
      }
      if (ok && !constantes) {
        // Es expresion compuesta
        regResult.setExpr_compuesta(true);
        if(!anidar){
  	  	  	miniLeng.createSubTreeAST(resul.nodoAST, r1.nodoAST, r2.nodoAST, ASTNodo.TipoNodo.OP,op);
  	  	  	aux = resul.nodoAST;
  	  	  	anidar = true;
  	  	}
  	  	else{
  	  	    regResult.nodoAST = new ASTNodo("op", g.nivel);
  	  	  	miniLeng.createSubTreeAST(resul.nodoAST, aux, r2.nodoAST, ASTNodo.TipoNodo.OP,op);
			aux = regResult.nodoAST;
  	  	}  	 
      }
    }
    ) *
    {
      // Comprobar que es expresion compuesta
	  if (tpFactor2 == null)
	  {
	    return tpFactor1;
	  }
	  else
	  { 
	    return regResult;
	  }  
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de operador multiplicativo OK
TipoOperador operador_multiplicativo() :
{
  // Declaracion de variables
  TipoOperador op = new TipoOperador();
}
{
  try
  {
    < tMULTIPLY >
    {
      // El operador es una multiplicacion
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.MULTIPLICACION);
      return op;
    }
  | < tDIVIDE >
    {
      // El operador es un cociente (opcion 1)
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.DIVISION);
      return op;
    }
  | < tDIV >
    {
      // El operador es un cociente (opcion 2)
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.DIVISION);
      return op;
    }
  | < tMOD >
    {
      // El operador es un modulo o residuo
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.MOD);
      return op;
    }
  | < tAND >
    {
      // El operador es una AND logica
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.AND);
      return op;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de factor OK
RegistroExp factor() :
{
  // Declaracion de factores y expresiones
  RegistroExp tpFactor, tpExp;
  RegistroExp result = new RegistroExp();
  // Token a procesar
  Token t;
}
{
  try
  {
    < tNOT > tpFactor = factor()
    {
      // Comprobacion de si es o no booleano
      if ((tpFactor.getTipo() != Simbolo.Tipo_variable.BOOLEANO) 
      && (tpFactor.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        // Comprobacion de si es booleano o no 
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Tipo " + tpFactor.getTipo() + " incompatible con " + 
        							" operador <>. Se esperaba BOOLEANO ");

        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);       
      }
      else
      {
        result.setTipo(Simbolo.Tipo_variable.BOOLEANO);
        result.nodoAST = tpFactor.nodoAST;
        result.nodoAST.setNegar_valor(true);        
      }
      // Devuelve el tipo de factor
      return result;
    }
  | < tMINUS > tpFactor = factor()
    {
      // Comprobacion de si es o no booleano
      if ((tpFactor.getTipo() != Simbolo.Tipo_variable.ENTERO) 
      && (tpFactor.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        // Comprobacion de si es booleano o no 
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Tipo " + tpFactor.getTipo().toString() +
        			" incompatible con operador -. Se esperaba ENTERO");

        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
        result.setTipo(Simbolo.Tipo_variable.ENTERO);
        result.nodoAST = tpFactor.nodoAST;
      }
      // Devuelve el tipo de factor
      return result;
    }
  | < tPARENTESIS_IZDA > tpExp = expresion() < tPARENTESIS_DCHA >
    {
      // Devuelve la expresiom normal
      return tpExp;
    }
  | t = < tENTACAR > < tPARENTESIS_IZDA > tpExp = expresion() < tPARENTESIS_DCHA >
    {
      // Comprobacion de si es entera la expresion
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.ENTERO) 
      && (tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        // Comprobacion de si es booleano o no 
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Argumento de tipo " + tpExp.getTipo().toString() +
        		" incompatible en funcion ENTACAR. Se esperaba ENTERO");

        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO); 
      }
      else
      {
         // Es un entero y se comprueba que no hay desbordamiento
        int valor = tpExp.getValorEnt();

        // Error de desbordamiento
        if (ErrorSemantico.hayDesbordamientoEntacar(valor))
        {
          // Comprobacion de si es booleano o no 
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - La operacion ENTACAR debe recibir un parámetro " +
          								"del tipo entero comprendido entre 0 y 255");
        } 
        else
        {
            // Comprobar que es constante
        	if (tpExp.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
        	{ 
				// Extraigo el numero entero y lo guardo a caracter
       			result.setValorString(String.valueOf((char)valor));
      			result.setTipo(Simbolo.Tipo_variable.CHAR);
			}
			else
			{
			  result.nodoAST = new ASTNodo("entcar", nivel, ASTNodo.TipoNodo.ENTCAR);
	  		  result.nodoAST.setTypeVar(Simbolo.TipoVariable.CADENA);
	  		  result.nodoAST.setRight(tpExp.nodoAST);
      		  result.tipoVar = Simbolo.TipoVariable.CHAR;
			}
      		// Lo guardo en CHAR    
        	result.setTipo(Simbolo.Tipo_variable.CHAR);
      	}
      }
      return result;
    }
  | < tCARAENT > < tPARENTESIS_IZDA > tpExp = expresion() < tPARENTESIS_DCHA >
    {
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.CHAR) 
      && (tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        // Comprobacion de si es o no caracter
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Argumento de tipo " + tpExp.getTipo().toString() +
        		" incompatible en funcion CARAENT. Se esperaba CARACTER");

        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
        if (tpExp.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
        { 
        	// Obtener el tipo de dato entero del caracter porque es cosnstante
        	char cadena = tpExp.valorString.charAt(0);
        	result.setValorEnt((int)cadena);
        }
        result.setTipo(Simbolo.Tipo_variable.ENTERO);
        result.nodoAST = tpExp.nodoAST;
      }
      return result;
    }
  | t = < tIDENTIFICADOR >
    {	  
		Simbolo s;
	    // Busqueda en la tabla de simbolos	
		s = tabla.buscar_simbolo(t.image);
		if (s == null)
		{
        	ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Variable " + t.image + " no definida");
		    tabla.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, 0);
        	result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);		  
		}
		else if (s.es_Simbolo_Accion())
		{
		   ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - La accion " + s.getNombre() + " no puede " +
	        	" formar parte de una expresion");
		    tabla.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, 0);
        	result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
		}
		else
		{
		    result.setTipo(s.getVariable());
		    result.setClase(s.getParametro());
		    result.nodoAST = new ASTNodo(t.image, s.getNivel(), ASTNodo.TipoNodo.VAR);
     		result.nodoAST.setDir(s.getDir());
     		result.nodoAST.setTypeParam(s.getParametro());
		}
		return result;	
	}    
  | t = < tCONSTANTE_NUMERICA >
    {
      // Y si es entacar
      int valor = Integer.parseInt(t.image);
      result.setValorEnt(valor);
      // Tipo de la variable entero
      result.setTipo(Simbolo.Tipo_variable.ENTERO);

	  // El simbolo es una constante
      result.setSimbolo(Simbolo.Tipo_simbolo.CONST);

      resul.nodoAST = new ASTNodo("ent", g.nivel, ASTNodo.TipoNodo.CONST);
   	  resul.nodoAST.setValue(resul.valorEnt);
      resul.nodoAST.setTypeVar(Simbolo.TipoVariable.ENTERO);
      
      // Devolucion del resultado
      return result;
    }
  | t = < tCONSTCHAR >
    {
      if(t.image.length() > 3) {
       		ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - No se puede usar el caracter " + t.image + 
       												 " en una expresion");
   	  }
   	  else {
   	    	// El simbolo es una constante
      		result.nodoAST = new ASTNodo(t.image, g.nivel, ASTNodo.TipoNodo.CONST);
	   		result.nodoAST.setTypeVar(Simbolo.TipoVariable.CHAR);
	   		result.nodoAST.setValue((int)(t.image.charAt(1)));
   	  }
   	  result.setTipo(Simbolo.Tipo_variable.CHAR);
   	  return result;
    }
  | t = < tCONSTCAD >
    {
      if(t.image.length() > 3) {
       		ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - No se puede usar la cadena " + t.image +
       												" en una expresion");      		
   	  }
   	  else {
   	    	// No coger las comillas
   	    	// El simbolo es una constante
      		result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
	   		result.nodoAST = new ASTNodo(t.image, g.nivel, ASTNodo.TipoNodo.CONST);
	   		result.nodoAST.setTypeVar(Simbolo.TipoVariable.CHAR);
	   		result.nodoAST.setValue((int)(t.image.charAt(1)));
   	  }

   	  result.setTipo(Simbolo.Tipo_variable.CADENA);
   	  return result;
    }
  | < tTRUE >
    {
      // El simbolo es una constante
      result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
      // Guardar el contenido de la cadena
      result.setValorBool(true);
      // Tipo cadena de caracteres
      result.setTipo(Simbolo.Tipo_variable.BOOLEANO);

      resul.nodoAST = new ASTNodo("bool",g.nivel, ASTNodo.TipoNodo.CONST);
   	  resul.nodoAST.setValue(1);
      resul.nodoAST.setTypeVar(Simbolo.TipoVariable.ENTERO);
      // Devolucion del resultado
      return result;
    }
  | < tFALSE >
    {
      // El simbolo es una constante
      result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
      // Guardar el contenido de la cadena
      result.setValorBool(false);
      // Tipo cadena de caracteres
      result.setTipo(Simbolo.Tipo_variable.BOOLEANO);

	 resul.nodoAST = new ASTNodo("bool",g.nivel, ASTNodo.TipoNodo.CONST);
     resul.nodoAST.setValue(0);
     resul.nodoAST.setTypeVar(Simbolo.TipoVariable.ENTERO);
     
      // Devolucion del resultado
      return result;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de seelccion OK
ASTNodo seleccion(GeneradorCodigo genCod):
{
  // Declaracion de variables
  RegistroExp tpExp;
  ASTNodo nodoSeleccion = null, sentenciasL=null, sentenciasR=null;
}
{
  try
  {
    < tSI >
    tpExp = expresion()
    {
      // Evaluacion de la condicion
      ok = tpExp.getTipo() != Simbolo.Tipo_variable.BOOLEANO;
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO) && ok)
      {
        // Se esperaba una condicion booleana
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - La condicion en la seleccion debe ser un booleano");
      }
      if (ok)
      {
        nodoSeleccion = new ASTNodo("if", nivel, ASTNodo.TipoNodo.IF);
		nodoSeleccion.setCond(r.nodoAST);
      }
    }
    < tENT >
    sentenciasL = lista_sentencias(genCod)
    {
      if(ok)
      { 
	   	nodoSeleccion.setIzquierda(sentenciasL);
	  }
    } (< tSI_NO >
    sentenciasR = lista_sentencias(genCod)
    ) ?
    < tFSI >
    {
	   if (ok) { 
		nodoSeleccion.setDerecha(sentenciasR);
	   }
	   return nodoSeleccion;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de declaracion_acciones OK
ASTNodo declaracion_acciones(GeneradorCodigo genCod) :
{
  ASTNodo accion = null, resultado = null, aux = null;
}
{
  try
  {
    (
      accion = declaracion_accion(genCod)
      {
        if (resultado == null)
        {
          resultado = accion;
        }
        else
        {
          aux = resultado;
          while(aux.getSiguiente() != null){
			aux = aux.getSiguiente();
		  }
		  aux.setSiguiente(accion);
        }
      }
      ) *
      {
        return resultado;
      }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de declaracion_Accion OK
ASTNodo declaracion_accion(GeneradorCodigo genCod) :
{
  int total_variables = 0;
  ASTNodo acciones = null, sentencias = null;
  RegistroExp cabecera = null;
}
{
  try
  {
    cabecera = cabecera_accion(genCod) < tPUNTYCOM >
    total_variables = declaracion_variables(genCod)
    {
       genCod.OSF_s += total_variables;
       cabecera.s.setDir(genCod.OSF_s);
    }
    declaracion_acciones() bloque_sentencias()
    {
      // Eliminacion de variables
      tabla.eliminar_variables(nivel);
      // Eliminar las acciones
      tabla.eliminar_acciones(nivel);
      // Eliminar los parametros ocultos
      tabla.eliminar_parametros_ocultos(nivel);
      // Decrementar el nivel porque se cierra un bloque       
      nivel--;

      genCod.OSF_s -= total_variables;

      if (cabecera.nodoAST != null)
      {
        cabecera.nodoAST.setSiguiente(acciones);
    	cabecera.nodoAST.setDerecha(sentencias);
      }
      return cabecera.nodoAST;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de cabecera_accion OK
RegistroExp cabecera_accion(GeneradorCodigo genCod) :
{
  Token tId;
  Simbolo s = null;
  Simbolo.Tipo_simbolo tp_Sim;
  boolean ok = false;
  // Lista de parametros de la accion
  LinkedList < LinkedList < Simbolo > > listaDeParametros = new LinkedList < LinkedList < Simbolo > > ();

  ASTNodo resultado = null, parametros = null;
  RegistroExp reg_resul = new RegistroExp();
}
{
  try
  {
    // Apilar la nueva definicion de accion si no existe   
    < tACCION > 
    tId = < tIDENTIFICADOR >
    {
        // Buscar el simbolo en la tabla de simbolos
     	s = tabla.buscar_simbolo(tId.image);
     	
     	if ((s == null) || (s.getNivel() != nivel))
     	{
     	  	// Introducir accion en la tabla de simbolos
     	  	s = tabla.introducir_accion(tId.image, nivel, dir);
        	ok = true;	
        }
        else
        {
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Accion " + s.getNombre() + " duplicada");
            ok = false;
        }
      // Incrementar el nivel actual
      nivel++;
      genCod.setDireccionInicial();
    }
    // Procesamiento de los parametros
    listaDeParametros = parametros_formales(tId)
    {
      // Limpiar parametros de la posible acc
      if (ok)
      {
        for (int i = 0; i < listaDeParametros.size(); i++)
        {
          // Añadir la lista de parametros al simbolo
          s.anyadirParametrosAccion(listaDeParametros.get(i));
        }
        // Limpiar parametros de la posible accion anterior
      	tabla.limpiarListaParametros();
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de parametros formales OK
LinkedList < LinkedList < Simbolo > > parametros_formales(Token t) :
{
  // Lista global de listas de identificadores
  LinkedList < LinkedList < Simbolo > > parametros = new LinkedList < LinkedList < Simbolo > > ();
}
{
  try
  {
    (parametros = lista_parametros()
    {
      tabla.asignarListaParametros(parametros);
    }
    ) ?
    // Devolucion de todas las listas procesadas
    {
      return tabla.getListasParametros();
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla para lista_parametros OK
LinkedList < LinkedList < Simbolo > > lista_parametros() :
{
  // Lista global de listas de identificadores
  LinkedList < LinkedList < Simbolo > > listaGlobal = new LinkedList < LinkedList < Simbolo > > ();
  // Lista de identificadores
  LinkedList < Simbolo > lista = new LinkedList < Simbolo > ();
}
{
  try
  {
    < tPARENTESIS_IZDA >
    (      lista = parametros()
      {
      	listaGlobal.add(lista);		
      }
      (< tPUNTYCOM > lista = parametros()
      {
        listaGlobal.add(lista);
      }
      ) * < tPARENTESIS_DCHA >
      {
      return listaGlobal;
      }
     | < tPARENTESIS_DCHA >
     {
       return listaGlobal;
     }
   )
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de parametros OK
LinkedList < Simbolo > parametros() :
{
  // Declaracion de variables
  // Simbolo a guardar en la tabla de simbolos
  Simbolo s;
  // Clase de parametro y tipo de variable del simbolo a introducir
  Simbolo.Clase_parametro cl_Param;
  Simbolo.Tipo_variable tipo_Var;
  // Lista de simbolos leidos a almacenar en la tabla de simbolos
  LinkedList < Simbolo > lista = new LinkedList < Simbolo > ();
  // Lista de identificadores procesados
  LinkedList < String > listaIdentificadores = new LinkedList < String > ();
}
{
  try
  {
    // Lectura del tipo de clase y del tipo de parametro
    cl_Param = clase_parametros() 
    tipo_Var = tipos_variables() 
    listaIdentificadores = identificadores()
    {
      // Tamaño de la lista de identificadores
      int dimension = listaIdentificadores.size();

    
      // Identificador del simbolo a procesar
      String identificadorActual;
      
      // Bucle de recorrido de la lista de identificadores
      for (int i = 0; i < dimension; i++)
      {
        // Obtener identificador actual
        identificadorActual = listaIdentificadores.get(i);

        // Comprobar que existe o no simbolo en la tabla

        // Insercion del parametro en la tabla de simbolos
        s = tabla.introducir_parametro(identificadorActual, tipo_Var, cl_Param, nivel, dir);

		// Si se ha creado el simbolo
        if (s != null)
        {
           // Añadir parametro a la lista de parametros
        	lista.add(s);	
        }
        else
        {
          // Comprobar que la variable esta en la tabla de simbolos
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Parametro repetido " + identificadorActual);
        }
      }
      return lista;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de declaracion variables OK
int declaracion_variables(GeneradorCodigo genCod) :
{
  // Declaracion de variables
  int ret = 0, aux = 0;
  Token t;
}
{
  try
  {
    (
      aux = declaracion() < tPUNTYCOM >
    {
      ret += aux;
    }
    ) *
    {
      return ret;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla para los tipos de variables OK
Simbolo.Tipo_variable tipos_variables() :
{
  // Declaracion de variable
  Token t;
}
{
  try
  {
    // Asignacion del token leido
    (
    t = < tENTERO >
  | t = < tCARACTER >
  | t = < tBOOLEANO >
    )
    {
      // Control del tipo token
      switch (t.kind)
      {
        case tENTERO : 
        // Es token tENTERO
        return Simbolo.Tipo_variable.ENTERO;
        break;
        case tCARACTER : 
        // Es token tCARACTER
        return Simbolo.Tipo_variable.CHAR;
        break;
        case tCONSTCAD : 
        // Es token tCARACTER
        return Simbolo.Tipo_variable.CADENA;
        break;
        case tBOOLEANO : 
        // Es token tBOOLEANO
        return Simbolo.Tipo_variable.BOOLEANO;
        break;
        default : 
        // No es niguno de los anteriores es DESCONOCIDO
        return Simbolo.Tipo_variable.DESCONOCIDO;
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla de declaracion OK
void declaracion() :
{
  // Declaracion de variables
  Token t;
  Simbolo.Tipo_variable tp_Var;
  LinkedList < String > lista = new LinkedList < String > ();
  // Variable para guardar el identificador del simbolo a introducir
  String identificadorActual;
  Simbolo s;
}
{
  try
  {
    tp_Var = tipos_variables() 
    lista = identificadores()
    {
      // Tamaño de la lista de identificadores
      int dimension = lista.size();
      //Bucle de recorrido de insercion de variables
      for (int i = 0; i < dimension; i++)
      {
        // Obtencion del identificador actual
        identificadorActual = lista.get(i);
        // Simbolo ya existente en la tabla de simbolos
       
        // introducir el nuevo simbolo
        s = tabla.introducir_variable(identificadorActual, tp_Var, nivel, dir);

		// Comprobar que la variable esta en la tabla de simbolos
        if (s == null)
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - Variable repetida " + identificadorActual);
        }
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla para los identificadores OK
LinkedList < String > identificadores() :
{
  // Declaracion de una lista auxiliar de identificadores
  Token t;
  // Lista de identificadores (parametros o variables)
  LinkedList < String > listaIdentificadores = new LinkedList < String > ();
}
{
  try
  {
    // Coger primer identificador
    t = < tIDENTIFICADOR >
    {
      // Añadir el identificador a lista
      listaIdentificadores.add(t.image);
    }
    (< tCOMA > 
    // Coger los siguientes identificadores
    t = < tIDENTIFICADOR >
    {
      // Añadir el identificador a lista
      listaIdentificadores.add(t.image);
    }
    ) *
    // Todos los identificadores
    {
      return listaIdentificadores;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}

// Regla para las clases de parametros OK
Simbolo.Clase_parametro clase_parametros() :
{
  // Declaracion de variables
  Token t;
}
{
  try
  {
    // Asignacion del token hallado
    (
    t = < tVAL >
  | t = < tREF >
    )
    {
      if (t.kind == tVAL)
      {
        // Es token tVAL
        return Simbolo.Clase_parametro.VAL;
      }
      else if (t.kind == tREF)
      {
        // Es tokeb tREF
        return Simbolo.Clase_parametro.REF;
      }
      else
      {
        // Clase de parametro erroneo
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
	        	", columna " + token.beginColumn + "  - La clase de parametro no es correcta");
      }
      // El tipo de clase ha sido procesada
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico eS = new ErrorSintactico(e);
  }
}
