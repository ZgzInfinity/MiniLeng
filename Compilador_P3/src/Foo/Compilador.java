/* Generated By:JavaCC: Do not edit this line. Compilador.java */
package Foo;

public class Compilador implements CompiladorConstants {
  public static void main(String args []) throws ParseException
  {
    /* nombre del fichero */

        String nombreArchivo;
        String path = "C:\u005c\u005cUsers\u005c\u005cGord\u005c\u005cDesktop\u005c\u005cprogramas\u005c\u005c";

        if (args[0].equals("-v")) {
                System.out.println("Compilacion en modo verbose");
                nombreArchivo = args[1];
        }
        else {
            System.out.println("Compilacion sin modo verbose");
            nombreArchivo = args[0];
    }

        /* Completar la ruta del path */
        path += nombreArchivo;


    System.out.println("LEYENDO FICHERO " + nombreArchivo + "\u005cn");
    try
    {
      /* Crear el parser con respecto al fichero */
      Compilador parser = new Compilador (new java.io.FileInputStream(path));
      int res = Compilador.programa();
      if (args[0].equals("-v")) {
      /* Mostrar total de tokens */
          TablaHash.mostrarTokensNormales();

          /* Mostrar total de identificadores */
          TablaHash.mostrarIdentificadores();
          }
          System.out.println("El fichero introducido es correcto");
        }
    catch (Exception e)
    {
       System.out.println("INCORRECTO");
       System.out.println(e.getMessage());
       Compilador.ReInit(System.in);
    }
    catch (Error e)
      {
       System.out.println("FALLO");
       System.out.println(e.getMessage());
    }
  }

/* Construccion del analizador sintactico */

// Regla de programa
  static final public int programa() throws ParseException {
    try {
      jj_consume_token(tPROGRAMA);
      jj_consume_token(tIDENTIFICADOR);
      jj_consume_token(tPUNTYCOM);
      declaracion_variables();
      declaracion_acciones();
      bloque_sentencias();
      jj_consume_token(0);
         {if (true) return 0;}
    } catch (Exception e) {
     System.out.println("Error en programa");
     {if (true) return 1;}
    }
    throw new Error("Missing return statement in function");
  }

// Regla de bloque_sentencias
  static final public void bloque_sentencias() throws ParseException {
    try {
      jj_consume_token(tPRINCIPIO);
      lista_sentencias();
      jj_consume_token(tFIN);
    } catch (Exception e) {
     System.out.println("Error en bloque_sentencias");
    }
  }

// Regla de lista_sentencias
  static final public void lista_sentencias() throws ParseException {
    try {
      label_1:
      while (true) {
        sentencia();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSI:
        case tMQ:
        case tESCRIBIR:
        case tLEER:
        case tIDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
    } catch (Exception e) {
     System.out.println("Error en lista_sentencias");
    }
  }

// Regla de sentencia
  static final public void sentencia() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tLEER:
        leer();
        jj_consume_token(tPUNTYCOM);
        break;
      case tESCRIBIR:
        escribir();
        jj_consume_token(tPUNTYCOM);
        break;
      case tIDENTIFICADOR:
        asignacion();
        break;
        invocacion_accion();
        break;
      case tSI:
        seleccion();
        break;
      case tMQ:
        mientras_que();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
     System.out.println("Error en sentencia");
    }
  }

// Regla de escribir
  static final public void escribir() throws ParseException {
    try {
      jj_consume_token(tESCRIBIR);
      jj_consume_token(tPARENTESIS_IZDA);
      lista_escribibles();
      jj_consume_token(tPARENTESIS_DCHA);
    } catch (Exception e) {
     System.out.println("Error en escribir");
    }
  }

// Regla de asignacion
  static final public void asignacion() throws ParseException {
    try {
      jj_consume_token(tIDENTIFICADOR);
      jj_consume_token(tOPAS);
      expresion();
      jj_consume_token(tPUNTYCOM);
    } catch (Exception e) {
     System.out.println("Error en asignacion");
    }
  }

// Regla de lista_asignables
  static final public void lista_asignables() throws ParseException {
    try {
      jj_consume_token(tIDENTIFICADOR);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(tCOMA);
        jj_consume_token(tIDENTIFICADOR);
      }
    } catch (Exception e) {
     System.out.println("Error en lista_asignables");
    }
  }

// Regla de leer
  static final public void leer() throws ParseException {
    try {
      jj_consume_token(tLEER);
      jj_consume_token(tPARENTESIS_IZDA);
      lista_asignables();
      jj_consume_token(tPARENTESIS_DCHA);
    } catch (Exception e) {
     System.out.println("Error en leer");
    }
  }

// Regla de lista_escribibles MIERDA
  static final public void lista_escribibles() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIDENTIFICADOR:
        jj_consume_token(tIDENTIFICADOR);
        break;
      case tCONSTCHAR:
        jj_consume_token(tCONSTCHAR);
        break;
      case tCONSTCAD:
        jj_consume_token(tCONSTCAD);
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
     System.out.println("Error en lista_escribibles");
    }
  }

// Regla de invocacion accion
  static final public void invocacion_accion() throws ParseException {
    try {
      jj_consume_token(tIDENTIFICADOR);
      argumentos();
      jj_consume_token(tPUNTYCOM);
    } catch (Exception e) {
     System.out.println("Error en invocacion_accion");
    }
  }

//Regla de mientras que
  static final public void mientras_que() throws ParseException {
    try {
      jj_consume_token(tMQ);
      expresion();
      lista_sentencias();
      jj_consume_token(tFMQ);
    } catch (Exception e) {
     System.out.println("Error en mientras_que");
    }
  }

// Regla para los argumentos
  static final public void argumentos() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPARENTESIS_IZDA:
        jj_consume_token(tPARENTESIS_IZDA);
        jj_consume_token(tPARENTESIS_DCHA);
        break;
        jj_consume_token(tPARENTESIS_IZDA);
        lista_expresiones();
        jj_consume_token(tPARENTESIS_DCHA);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
     System.out.println("Error en argumentos");
    }
  }

// Regla de lista de expresiones
  static final public void lista_expresiones() throws ParseException {
    try {
      label_3:
      while (true) {
        expresion();
        jj_consume_token(tPUNTYCOM);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tPLUS:
        case tMINUS:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
      }
    } catch (Exception e) {
    System.out.println("Error en secuencia");
    }
  }

// Regla de expresion
  static final public void expresion() throws ParseException {
    try {
      expresion_simple();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tMAYOR:
        case tMENOR:
        case tIGUAL:
        case tMAI:
        case tMEI:
        case tNI:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        operador_relacional();
        expresion_simple();
      }
    } catch (Exception e) {
     System.out.println("Error en expresion");
    }
  }

// Regla de operador_relacional
  static final public void operador_relacional() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIGUAL:
        jj_consume_token(tIGUAL);
        break;
      case tMENOR:
        jj_consume_token(tMENOR);
        break;
      case tMEI:
        jj_consume_token(tMEI);
        break;
      case tNI:
        jj_consume_token(tNI);
        break;
      case tMAI:
        jj_consume_token(tMAI);
        break;
      case tMAYOR:
        jj_consume_token(tMAYOR);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
     System.out.println("Error en operador_relacional");
    }
  }

// Regla operador aditivo
  static final public void operador_aditivo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPLUS:
        jj_consume_token(tPLUS);
        break;
      case tMINUS:
        jj_consume_token(tMINUS);
        break;
      case tOR:
        jj_consume_token(tOR);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
        System.out.println("Error en operador aditivo");
    }
  }

// regla de expresion simple
  static final public void expresion_simple() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPLUS:
        jj_consume_token(tPLUS);
        break;
      case tMINUS:
        jj_consume_token(tMINUS);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termino();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tPLUS:
        case tMINUS:
        case tOR:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_5;
        }
        operador_aditivo();
        termino();
      }
    } catch (Exception e) {
     System.out.println("Error en expresion simple");
    }
  }

// Regla de termino
  static final public void termino() throws ParseException {
    try {
      factor();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tMULTIPLY:
        case tDIVIDE:
        case tAND:
        case tMOD:
        case tDIV:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        operador_multiplicativo();
        factor();
      }
    } catch (Exception e) {
     System.out.println("Error en termino");
    }
  }

// Regla de operador multiplicativo
  static final public void operador_multiplicativo() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMULTIPLY:
        jj_consume_token(tMULTIPLY);
        break;
      case tDIVIDE:
        jj_consume_token(tDIVIDE);
        break;
      case tDIV:
        jj_consume_token(tDIV);
        break;
      case tMOD:
        jj_consume_token(tMOD);
        break;
      case tAND:
        jj_consume_token(tAND);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
    System.out.println("Error en operador_multiplicativo");
    }
  }

// Regla de expresion simple
  static final public void factor() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIDENTIFICADOR:
        jj_consume_token(tIDENTIFICADOR);
        break;
      case tCONSTANTE_NUMERICA:
        jj_consume_token(tCONSTANTE_NUMERICA);
        break;
      case tNOT:
        jj_consume_token(tNOT);
        factor();
        break;
      case tPARENTESIS_IZDA:
        jj_consume_token(tPARENTESIS_IZDA);
        expresion();
        jj_consume_token(tPARENTESIS_DCHA);
        break;
      case tENTACAR:
        jj_consume_token(tENTACAR);
        jj_consume_token(tPARENTESIS_IZDA);
        expresion();
        jj_consume_token(tPARENTESIS_DCHA);
        break;
      case tCARAENT:
        jj_consume_token(tCARAENT);
        jj_consume_token(tPARENTESIS_IZDA);
        expresion();
        jj_consume_token(tPARENTESIS_DCHA);
        break;
        jj_consume_token(tCONSTANTE_NUMERICA);
        break;
      case tCONSTCHAR:
        jj_consume_token(tCONSTCHAR);
        break;
      case tCONSTCAD:
        jj_consume_token(tCONSTCAD);
        break;
      case tTRUE:
        jj_consume_token(tTRUE);
        break;
      case tFALSE:
        jj_consume_token(tFALSE);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
          System.out.println("Error en factor");
    }
  }

// Regla de seelccion
  static final public void seleccion() throws ParseException {
    try {
      jj_consume_token(tSI);
      expresion();
      jj_consume_token(tENT);
      lista_sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tSI_NO:
        jj_consume_token(tSI_NO);
        lista_sentencias();
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      jj_consume_token(tFSI);
    } catch (Exception e) {
        System.out.println("Error en seleccion");
    }
  }

// Regla de declaracion_acciones
  static final public void declaracion_acciones() throws ParseException {
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tACCION:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_7;
        }
        declaracion_accion();
      }
    } catch (Exception e) {
    System.out.println("Error en declaracion_acciones");
    }
  }

// Regla de declaracion_Accion
  static final public void declaracion_accion() throws ParseException {
    try {
      cabecera_accion();
      jj_consume_token(tPUNTYCOM);
    } catch (Exception e) {
    System.out.println("Error en declaracion_accion");
    }
  }

// Regla de cabecera_accion
  static final public void cabecera_accion() throws ParseException {
    try {
      jj_consume_token(tACCION);
      jj_consume_token(tIDENTIFICADOR);
      parametros_formales();
    } catch (Exception e) {
    System.out.println("Error en cabecera_accion");
    }
  }

// Regla de parametros formales
  static final public void parametros_formales() throws ParseException {
    try {
      jj_consume_token(tPARENTESIS_IZDA);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tVAL:
        case tREF:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        lista_parametros();
      }
      jj_consume_token(tPARENTESIS_DCHA);
    } catch (Exception e) {
    System.out.println("Error en parametros_formales");
    }
  }

// Regla para lista_parametros
  static final public void lista_parametros() throws ParseException {
    try {
      parametros();
      jj_consume_token(tPUNTYCOM);
    } catch (Exception e) {
     System.out.println("Error en lista_parametros");
    }
  }

// Regla de parametros
  static final public void parametros() throws ParseException {
    try {
      label_9:
      while (true) {
        clase_parametros();
        tipos_variables();
        identificadores();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tVAL:
        case tREF:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_9;
        }
      }
    } catch (Exception e) {
     System.out.println("Error en parametros");
    }
  }

// Regla de declaracion variables
  static final public void declaracion_variables() throws ParseException {
    try {
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tENTERO:
        case tBOOLEANO:
        case tCARACTER:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_10;
        }
        declaracion();
        jj_consume_token(tPUNTYCOM);
      }
    } catch (Exception e) {
     System.out.println("Error en declaracion_variables");
    }
  }

// Regla de declaracion
  static final public void declaracion() throws ParseException {
    try {
      tipos_variables();
      identificadores();
    } catch (Exception e) {
     System.out.println("Error en declaracion");
    }
  }

// Regla para los identificadores
  static final public void identificadores() throws ParseException {
    try {
      jj_consume_token(tIDENTIFICADOR);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_11;
        }
        jj_consume_token(tCOMA);
        jj_consume_token(tIDENTIFICADOR);
      }
    } catch (Exception e) {
     System.out.println("Error en identificadores");
    }
  }

// Regla para los tipos de variables
  static final public void tipos_variables() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tENTERO:
        jj_consume_token(tENTERO);
        break;
      case tCARACTER:
        jj_consume_token(tCARACTER);
        break;
      case tBOOLEANO:
        jj_consume_token(tBOOLEANO);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
         System.out.println("Error en tipos_variables\u005cn");
    }
  }

// Regla para las clases de parametros
  static final public void clase_parametros() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tVAL:
        jj_consume_token(tVAL);
        break;
      case tREF:
        jj_consume_token(tREF);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Exception e) {
         System.out.println("Error en clase_parametros\u005cn");
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[22];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x88000000,0x88000000,0x0,0x0,0x0,0x600,0x7e000,0x7e000,0x200600,0x600,0x200600,0x101800,0x101800,0x400000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100006,0x100006,0x400000,0x160000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x9e0f00,0x0,0x1000,0x6000,0x6000,0xe0,0x400000,0xe0,0x6000,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 22; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 22; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
