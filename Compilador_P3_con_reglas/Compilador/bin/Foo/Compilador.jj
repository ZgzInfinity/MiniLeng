/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = true;
  ignore_case = true;
}

PARSER_BEGIN(Compilador)
package Foo;

public class Compilador
{
  public static void main(String args []) throws ParseException
  {
    /* nombre del fichero */
	
	String nombreArchivo;
	String path = "C:\\Users\\Gord\\Desktop\\programas\\";

	if (args[0].equals("-v")) {
	  	System.out.println("Compilacion en modo verbose");
	  	nombreArchivo = args[1];
	}
	else {
	    System.out.println("Compilacion sin modo verbose");
	    nombreArchivo = args[0];
    }

	/* Completar la ruta del path */
	path += nombreArchivo;


    System.out.println("LEYENDO FICHERO " + nombreArchivo + "\n");
    try
    {
      /* Crear el parser con respecto al fichero */
      Compilador parser = new Compilador (new java.io.FileInputStream(path));
      int res = Compilador.programa();
      if (args[0].equals("-v")) { 
      /* Mostrar total de tokens */
	  TablaHash.mostrarTokensNormales();
	
	  /* Mostrar total de identificadores */
	  TablaHash.mostrarIdentificadores();
	  }
	  System.out.println("El fichero introducido es correcto");
  	} 
    catch (Exception e)
    {
       System.out.println("INCORRECTO");
       System.out.println(e.getMessage());
       Compilador.ReInit(System.in);
    }
    catch (Error e)
      {
       System.out.println("FALLO");
       System.out.println(e.getMessage());
    }
  }
}

PARSER_END(Compilador)

SKIP : /* CARACTERES A IGNORAR */
{
  " "
| "\r"
| "\t"
| "\n"
| "%%" : ComentLinea
}

<ComentLinea> SKIP :
{
  "%%" : DEFAULT
}

<ComentLinea> MORE :
{
  <~[]>
}

SPECIAL_TOKEN : /* Comentario de una linea */
{
  <SINGLE_LINE_COMMENT: "%" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN : /* OPERADORES ARITMETICOS */
{
  < tPLUS : "+" >
  {
    TablaHash.anyadirHashTokens("tPLUS");
  }
| < tMINUS : "-" >
  {
    TablaHash.anyadirHashTokens("tMINUS");
  }
| < tMULTIPLY : "*" >
  {
    TablaHash.anyadirHashTokens("tMULTIPLY");
  }
| < tDIVIDE : "/" >
  {
    TablaHash.anyadirHashTokens("tDIVIDE");
  }
| < tMAYOR : ">" >
  {
    TablaHash.anyadirHashTokens("tMAYOR");
  }
| < tMENOR : "<" >
  {
    TablaHash.anyadirHashTokens("tMENOR");
  }
| < tIGUAL : "=" >
  {
    TablaHash.anyadirHashTokens("tIGUAL");
  }
| < tMAI : ">=" >
  {
    TablaHash.anyadirHashTokens("tMAI");
  }
| < tMEI : "<=" >
  {
    TablaHash.anyadirHashTokens("tMEI");
  }
| < tNI : "<>" >
  {
    TablaHash.anyadirHashTokens("tNI");
  }
| < tOPAS : ":=" >
  {
    TablaHash.anyadirHashTokens("tOPAS");
  }
}

TOKEN : /* OPERADORES LOGICOS */
{
  < tAND : "and" >
   {
    TablaHash.anyadirHashTokens("tAND");
   }
| < tOR : "or" >
  {
    TablaHash.anyadirHashTokens("tOR");
  }
| < tNOT : "not" >
  {
    TablaHash.anyadirHashTokens("tNOT");
  }
}


TOKEN : /* PALABRAS RESERVADAS */
{
  < tPROGRAMA : "programa" >
   {
    TablaHash.anyadirHashTokens("tPROGRAMA");
   }
| < tVAR : "var" >
  {
    TablaHash.anyadirHashTokens("tVAR");
  }
| < tPRINCIPIO : "principio" >
  {
    TablaHash.anyadirHashTokens("tPRINCIPIO");
  }
| < tFIN : "fin" >
  {
    TablaHash.anyadirHashTokens("tFIN");
  }
| < tSI : "si" >
  {
    TablaHash.anyadirHashTokens("tSI");
  }
| < tENT : "ent" >
  {
    TablaHash.anyadirHashTokens("tENT");
  }
| < tSI_NO : "si_no" >
  {
    TablaHash.anyadirHashTokens("tSI_NO");
  }
| < tFSI : "fsi" >
  {
    TablaHash.anyadirHashTokens("tFSI");
  }
| < tMQ : "mq" >
  {
    TablaHash.anyadirHashTokens("tMQ");
  }
| < tFMQ : "fmq" >
  {
    TablaHash.anyadirHashTokens("tFMQ");
  }
| < tESCRIBIR : "escribir" >
  {
    TablaHash.anyadirHashTokens("tESCRIBIR");
  }
| < tLEER : "leer" >
  {
    TablaHash.anyadirHashTokens("tLEER");
  }
| < tMOD : "mod" >
  {
    TablaHash.anyadirHashTokens("tMOD");
  }
| < tDIV : "div" >
  {
    TablaHash.anyadirHashTokens("tDIV");
  }
| < tENTERO : "entero" >
  {
    TablaHash.anyadirHashTokens("tENTERO");
  }
| < tBOOLEANO : "booleano" >
  {
    TablaHash.anyadirHashTokens("tBOOLEANO");
  }
| < tCARACTER : "caracter" >
  {
    TablaHash.anyadirHashTokens("tCARACTER");
  }
| < tTRUE : "true" >
  {
    TablaHash.anyadirHashTokens("tTRUE");
  }
| < tFALSE : "false" >
  {
    TablaHash.anyadirHashTokens("tFALSE");
  }
| < tENTACAR : "entacar" >
  {
    TablaHash.anyadirHashTokens("tENTACAR");
  }
| < tCARAENT : "caraent" >
  {
    TablaHash.anyadirHashTokens("tCARAENT");
  }
| < tACCION : "accion" >
  {
    TablaHash.anyadirHashTokens("tACCION");
  }
| < tVAL : "val" >
  {
    TablaHash.anyadirHashTokens("tVAL");
  }
| < tREF : "ref" >
  {
    TablaHash.anyadirHashTokens("tREF");
  }
}


TOKEN :  /*EXPRESIONES */
{
  < #tDIGITO : ["0"-"9"] >	
| < #tLETRA : ["a"-"z"] >
| < tCONSTCHAR : ("\"")(~["\""])("\"") >
  {
    TablaHash.anyadirHashTokens("tCONSTCHAR");
  }
| < tCONSTCAD :  ("\"")(~["\""])+("\"") >
  {
    TablaHash.anyadirHashTokens("tCONSTCAD");
  }
| < tCONSTANTE_NUMERICA : (< tDIGITO >)+ >
  {
    TablaHash.anyadirHashTokens("tCONSTANTE_NUMERICA");
  }
| < tIDENTIFICADOR  : (< tLETRA > | ((< tLETRA > | "_")(< tLETRA > | "_" | < tDIGITO >)*(< tLETRA > | < tDIGITO >))) >
	{
	  TablaHash.anyadirHashTokens(image.toString());
	  TablaHash.anyadirHashIdentificadores(image.toString());
	}
}


TOKEN : /* OPERADORES SEPARADDORES */
{
  < tPUNTYCOM : ";" >
  {
    TablaHash.anyadirHashTokens("tPUNTYCOM");
  }
| < tCOMA : "," >
  {
    TablaHash.anyadirHashTokens("tCOMA");
  }
| < tPARENTESIS_IZDA : "(" >
  {
    TablaHash.anyadirHashTokens("tPARENTESIS_IZDA");
  }
| < tPARENTESIS_DCHA : ")" >
  {
    TablaHash.anyadirHashTokens("tPARENTESIS_DCHA");
  }
}


/* Construccion del analizador sintactico */

// Regla de programa
int programa():
{
}
{
  try{
       < tPROGRAMA > < tIDENTIFICADOR > < tPUNTYCOM > declaracion_variables() declaracion_acciones() bloque_sentencias() < EOF >
       {
         return 0;
       }
  }
  catch (Exception e){
     System.out.println("Error en programa");
     return 1;
  }
}


// Regla de bloque_sentencias OK
void bloque_sentencias():
{
}
{
  try {
       < tPRINCIPIO > lista_sentencias() < tFIN >
  }
  catch (Exception e){
     System.out.println("Error en bloque_sentencias");
  }
}

// Regla de lista_sentencias OK EN DUDA
void lista_sentencias():
{
}
{
  try{
      (sentencia())+
  }
  catch (Exception e){
     System.out.println("Error en lista_sentencias");
  }
}


// Regla de sentencia OK
void sentencia():
{
}
{
 try{
      leer() < tPUNTYCOM >
   	| escribir() < tPUNTYCOM >
   	| asig_invoc()
   	| seleccion()
   	| mientras_que()
  }
  catch (Exception e){
     System.out.println("Error en sentencia");
  }
}


void asig_invoc():
{
}
{
try {
       < tIDENTIFICADOR > (asignacion() | invocacion_accion())
  }
  catch (Exception e){
     System.out.println("Error en asignacion");
  }
}


// Regla de asignacion OK
void asignacion():
{
}
{
  try {
       < tOPAS > expresion() < tPUNTYCOM >
  }
  catch (Exception e){
     System.out.println("Error en asignacion");
  }
}


// Regla de lista_asignables OK
void lista_asignables():
{
}
{
  try {
      identificadores()
  }
  catch (Exception e){
     System.out.println("Error en lista_asignables");
  }
}

// Regla de leer OK
void leer():
{
}
{
  try {
       < tLEER >< tPARENTESIS_IZDA > lista_asignables() < tPARENTESIS_DCHA >
  }
  catch (Exception e){
     System.out.println("Error en leer");
  }
}



// Regla de escribir OK
void escribir():
{
}
{
  try {
       < tESCRIBIR >< tPARENTESIS_IZDA > lista_asignables() < tPARENTESIS_DCHA >
  }
  catch (Exception e){
     System.out.println("Error en lista_escribibles");
  }
}


// Regla de lista_escribibles OK
void lista_escribibles():
{
}
{
  try {
       escribible() ( < tCOMA > escribible() )*
  }
  catch (Exception e){
     System.out.println("Error en lista_escribibles");
  }
}


// Regla de lista_escribibles OK
void escribible():
{
}
{
  try {
       < tIDENTIFICADOR >
     | < tCONSTCHAR >
     | < tCONSTCAD >
     | < tENTACAR > <tPARENTESIS_IZDA > <tCONSTANTE_NUMERICA > <tPARENTESIS_DCHA >
  }
  catch (Exception e){
     System.out.println("Error en lista_escribibles");
  }
}



// Regla de invocacion accion OK
void invocacion_accion():
{
}
{
  try {
     argumentos() < tPUNTYCOM >
  }
  catch (Exception e){
     System.out.println("Error en invocacion_accion");
  }
}



//Regla de mientras que OK
void mientras_que():
{
}
{
  try {
     < tMQ > expresion() lista_sentencias() < tFMQ >
  }
  catch (Exception e){
     System.out.println("Error en mientras_que");
  }
}


// Regla para los argumentos OK
void argumentos():
{
}
{
  try {
      < tPARENTESIS_IZDA > (lista_expresiones())? < tPARENTESIS_DCHA >
  }
  catch (Exception e){
     System.out.println("Error en argumentos");
  }
  
}



// Regla de lista de expresiones
void lista_expresiones():
{
}
{
  try {
     expresion()((< tAND > | < tOR >) expresion())*
  }
  catch (Exception e) {
    System.out.println("Error en secuencia");
  }
}


// Regla de expresion OK
void expresion():
{
}
{
 try {
  	  expresion_simple() (operador_relacional() expresion_simple())*
  }
  catch (Exception e) {
     System.out.println("Error en expresion");
  }
}


// Regla de operador_relacional OK
void operador_relacional():
{
}
{
  try {
      < tIGUAL >
    | < tMENOR >
    | < tMEI >
    | < tNI >
    | < tMAI >
    | < tMAYOR >
  }
  catch (Exception e) {
     System.out.println("Error en operador_relacional");
  }
}


// Regla operador aditivo OK
void operador_aditivo():
{
}
{
  try {
      < tPLUS > 
	| < tMINUS >
	| < tOR >
  }
  catch (Exception e) {
	System.out.println("Error en operador aditivo");
  }
}

// regla de expresion simple OK
void expresion_simple():
{
}
{
  try {
       (< tPLUS > |< tMINUS >)? termino() (operador_aditivo() termino())*
  }
  catch (Exception e) {
     System.out.println("Error en expresion simple");
  }
}


// Regla de termino OK
void termino():
{
}
{
  try {
     factor() (operador_multiplicativo() factor())*
  }
  catch (Exception e) {
     System.out.println("Error en termino");
  }
}



// Regla de operador multiplicativo OK
void operador_multiplicativo():
{
}
{
  try { 
 	  < tMULTIPLY >
 	| < tDIVIDE >
 	| < tDIV >
 	| < tMOD >
 	| < tAND >
  }
  catch(Exception e) {
    System.out.println("Error en operador_multiplicativo");
  }
}



// Regla de factor OK
void factor():
{
}
{
  try {
      < tMINUS > factor()
	| < tNOT > factor()
	| < tPARENTESIS_IZDA > expresion() < tPARENTESIS_DCHA >
	| < tENTACAR >< tPARENTESIS_IZDA > expresion() < tPARENTESIS_DCHA >
	| < tCARAENT >< tPARENTESIS_IZDA > expresion() < tPARENTESIS_DCHA >
	| < tIDENTIFICADOR >
	| < tCONSTANTE_NUMERICA >
	| < tCONSTCHAR >
	| < tCONSTCAD >
	| < tTRUE >
	| < tFALSE >
  }
  catch (Exception e) {
	  System.out.println("Error en factor");
  }
}



// Regla de seelccion OK
void seleccion():
{
}
{
  try {
    < tSI > expresion() < tENT > lista_sentencias() (< tSI_NO > lista_sentencias())? < tFSI >
  }
  catch (Exception e) {
  	System.out.println("Error en seleccion");
  }
}



// Regla de declaracion_acciones OK
void declaracion_acciones():
{
}
{
  try { 
 	(declaracion_accion())*
  }
  catch(Exception e) {
    System.out.println("Error en declaracion_acciones");
  }
}


// Regla de declaracion_Accion OK
void declaracion_accion():
{
}
{
  try { 
 	(cabecera_accion()) < tPUNTYCOM >
  }
  catch(Exception e) {
    System.out.println("Error en declaracion_accion");
  }
}



// Regla de cabecera_accion OK
void cabecera_accion():
{
}
{
  try { 
 	 < tACCION > < tIDENTIFICADOR > parametros_formales()
  }
  catch(Exception e) {
    System.out.println("Error en cabecera_accion");
  }
}


// Regla de parametros formales OK
void parametros_formales():
{
}
{
  try { 
 	 (lista_parametros())?
  }
  catch(Exception e) {
    System.out.println("Error en parametros_formales");
  }
}




// Regla para lista_parametros OK
void lista_parametros():
{
}
{
  try {
     < tPARENTESIS_IZDA > parametros() ( < tCOMA > parametros() )* < tPARENTESIS_DCHA >
  }
  catch (Exception e){
     System.out.println("Error en lista_parametros");
  }
}


// Regla de parametros OK
void parametros():
{
}
{
  try {
     clase_parametros() tipos_variables() identificadores()
  }
  catch (Exception e){
     System.out.println("Error en parametros");
  }
}


// Regla de declaracion variables OK
void declaracion_variables():
{
}
{
  try {
     ((declaracion()) < tPUNTYCOM >)*
  }
  catch (Exception e){
     System.out.println("Error en declaracion_variables");
  }
}

// Regla de declaracion OK
void declaracion():
{
}
{
  try {
     tipos_variables() identificadores()
  }
  catch (Exception e){
     System.out.println("Error en declaracion");
  }
}


// Regla para los identificadores OK
void identificadores():
{
}
{
  try {
     < tIDENTIFICADOR > (< tCOMA > < tIDENTIFICADOR >)*
  }
  catch (Exception e){
     System.out.println("Error en identificadores");
  }
}


// Regla para los tipos de variables OK
void tipos_variables():
{
}
{
  try {
    < tENTERO >
  | < tCARACTER >
  | < tBOOLEANO >
  }
  catch (Exception e){
   	 System.out.println("Error en tipos_variables\n");
  }
}


// Regla para las clases de parametros OK
void clase_parametros():
{
}
{
  try {
    < tVAL >
  | < tREF >
  }
  catch (Exception e){
   	 System.out.println("Error en clase_parametros\n");
  }
}










