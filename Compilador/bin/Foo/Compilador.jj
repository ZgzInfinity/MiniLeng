/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = true;
  ignore_case = true;
}

PARSER_BEGIN(Compilador)
package Foo;

public class Compilador
{
  public static void main(String args []) throws ParseException
  {
    /* nombre del fichero */
	String nombreArchivo;
	String path = "C:\\Users\\Gord\\Desktop\\programas\\";

	System.out.print("Introduce el nombre del fichero: ");

	java.util.Scanner teclado = new java.util.Scanner(System.in);
	nombreArchivo = teclado.nextLine();
	path += nombreArchivo;

	
    
    System.out.println("LEYENDO FICHERO " + nombreArchivo + "\n");
    try
    {
      /* Crear el parser con respecto al fichero */
      Compilador parser = new Compilador (new java.io.FileInputStream(path));
      int res = Compilador.leerFichero();
      
      /* Mostrar total de tokens */
	  TablaHash.mostrarTokensNormales();
	
	  /* Mostrar total de identificadores */
	  TablaHash.mostrarIdentificadores();
  	} 
    catch (Exception e)
    {
       System.out.println("INCORRECTO");
       System.out.println(e.getMessage());
       Compilador.ReInit(System.in);
    }
    catch (Error e)
      {
       System.out.println("FALLO");
       System.out.println(e.getMessage());
    }
  }
}

PARSER_END(Compilador)

SKIP : /* CARACTERES A IGNORAR */
{
  " "
| "\r"
| "\t"
| "\n"
| "%%" : ComentLinea
| "\"" : Cadena
}

<ComentLinea> SKIP :
{
  "%%" : DEFAULT
}

<ComentLinea> MORE :
{
  <~[]>
}

<Cadena> SKIP :
{
  "\"" : DEFAULT
}

<Cadena> MORE :
{
  <~[]>
}


SPECIAL_TOKEN : /* Comentario de una linea */
{
  <SINGLE_LINE_COMMENT: "%" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

TOKEN : /* OPERADORES ARITMETICOS */
{
  < tPLUS : "+" >
  {
    TablaHash.anyadirHashTokens("tPLUS");
  }
| < tMINUS : "-" >
  {
    TablaHash.anyadirHashTokens("tMINUS");
  }
| < tMULTIPLY : "*" >
  {
    TablaHash.anyadirHashTokens("tMULTIPLY");
  }
| < tDIVIDE : "/" >
  {
    TablaHash.anyadirHashTokens("tDIVIDE");
  }
| < tMAYOR : ">" >
  {
    TablaHash.anyadirHashTokens("tMAYOR");
  }
| < tMENOR : "<" >
  {
    TablaHash.anyadirHashTokens("tMENOR");
  }
| < tIGUAL : "=" >
  {
    TablaHash.anyadirHashTokens("tIGUAL");
  }
| < tMAI : ">=" >
  {
    TablaHash.anyadirHashTokens("tMAI");
  }
| < tMEI : "<=" >
  {
    TablaHash.anyadirHashTokens("tMEI");
  }
| < tNI : "<>" >
  {
    TablaHash.anyadirHashTokens("tNI");
  }
| < tOPAS : ":=" >
  {
    TablaHash.anyadirHashTokens("tOPAS");
  }
}

TOKEN : /* OPERADORES LOGICOS */
{
  < tAND : "and" >
   {
    TablaHash.anyadirHashTokens("tAND");
   }
| < tOR : "or" >
  {
    TablaHash.anyadirHashTokens("tOR");
  }
| < tNOT : "not" >
  {
    TablaHash.anyadirHashTokens("tNOT");
  }
}


TOKEN : /* PALABRAS RESERVADAS */
{
  < tPROGRAMA : "programa" >
   {
    TablaHash.anyadirHashTokens("tPROGRAMA");
   }
| < tVAR : "var" >
  {
    TablaHash.anyadirHashTokens("tVAR");
  }
| < tPRINCIPIO : "principio" >
  {
    TablaHash.anyadirHashTokens("tPRINCIPIO");
  }
| < tFIN : "fin" >
  {
    TablaHash.anyadirHashTokens("tFIN");
  }
| < tSI : "si" >
  {
    TablaHash.anyadirHashTokens("tSI");
  }
| < tENT : "ent" >
  {
    TablaHash.anyadirHashTokens("tENT");
  }
| < tSI_NO : "si_no" >
  {
    TablaHash.anyadirHashTokens("tSI_NO");
  }
| < tFSI : "fsi" >
  {
    TablaHash.anyadirHashTokens("tFSI");
  }
| < tMQ : "mq" >
  {
    TablaHash.anyadirHashTokens("tMQ");
  }
| < tFMQ : "fmq" >
  {
    TablaHash.anyadirHashTokens("tFMQ");
  }
| < tESCRIBIR : "escribir" >
  {
    TablaHash.anyadirHashTokens("tESCRIBIR");
  }
| < tLEER : "leer" >
  {
    TablaHash.anyadirHashTokens("tLEER");
  }
| < tMOD : "mod" >
  {
    TablaHash.anyadirHashTokens("tMOD");
  }
| < tDIV : "div" >
  {
    TablaHash.anyadirHashTokens("tDIV");
  }
| < tENTERO : "entero" >
  {
    TablaHash.anyadirHashTokens("tENTERO");
  }
| < tBOOLEANO : "booleano" >
  {
    TablaHash.anyadirHashTokens("tBOOLEANO");
  }
| < tCARACTER : "caracter" >
  {
    TablaHash.anyadirHashTokens("tCARACTER");
  }
| < tTRUE : "true" >
  {
    TablaHash.anyadirHashTokens("tTRUE");
  }
| < tFALSE : "false" >
  {
    TablaHash.anyadirHashTokens("tFALSE");
  }
| < tENTACAR : "entacar" >
  {
    TablaHash.anyadirHashTokens("tENTACAR");
  }
| < tCARAENT : "caraent" >
  {
    TablaHash.anyadirHashTokens("tCARAENT");
  }
| < tACCION : "accion" >
  {
    TablaHash.anyadirHashTokens("tACCION");
  }
| < tVAL : "val" >
  {
    TablaHash.anyadirHashTokens("tVAL");
  }
| < tREF : "ref" >
  {
    TablaHash.anyadirHashTokens("tREF");
  }
}


TOKEN :  /*EXPRESIONES */
{
  < #tDIGITO : ["0"-"9"] >	
| < #tLETRA : ["a"-"z"] >
| < tCONSTANTE_NUMERICA : (< tDIGITO >)+ >
  {
    TablaHash.anyadirHashTokens("tCONSTANTE_NUMERICA");
  }
| < tIDENTIFICADOR  : (< tLETRA > | ((< tLETRA > | "_")(< tLETRA > | "_" | < tDIGITO >)*(< tLETRA > | < tDIGITO >))) >
	{
	  TablaHash.anyadirHashTokens(image.toString());
	  TablaHash.anyadirHashIdentificadores(image.toString());
	}
}


TOKEN : /* OPERADORES SEPARADDORES */
{
  < tPUNTYCOM : ";" >
  {
    TablaHash.anyadirHashTokens("tPUNTYCOM");
  }
| < tCOMA : "," >
  {
    TablaHash.anyadirHashTokens("tCOMA");
  }
| < tPARENTESIS_IZDA : "(" >
  {
    TablaHash.anyadirHashTokens("tPARENTESIS_IZDA");
  }
| < tPARENTESIS_DCHA : ")" >
  {
    TablaHash.anyadirHashTokens("tPARENTESIS_DCHA");
  }
}



int leerFichero() :
{}
{
  (
    < tPROGRAMA >
  	| < tVAR >
	| < tAND >
	| < tOR>
	| < tNOT >
	| < tPLUS >
	| < tMINUS >
	| < tMULTIPLY >
	| < tDIVIDE >
	| < tMAYOR >
	| < tMENOR >
	| < tIGUAL >
	| < tMAI >
	| < tMEI >
	| < tNI >
	| < tOPAS >
	| < tPRINCIPIO >
	| < tFIN >
	| < tSI_NO >
	| < tSI >
	| < tENT >
	| < tFSI >
	| < tMQ >
	| < tFMQ >
	| < tESCRIBIR >
	| < tLEER >
	| < tMOD >
	| < tDIV >
	| < tENTERO >
	| < tBOOLEANO >
	| < tCARACTER>
	| < tTRUE >
	| < tFALSE >
	| < tENTACAR >
	| < tCARAENT >
	| < tACCION >
	| < tVAL >
	| < tREF >
	| < tCONSTANTE_NUMERICA >
	| < tIDENTIFICADOR >
	| < tPUNTYCOM >
	| < tCOMA >
	| < tPARENTESIS_IZDA >
	| < tPARENTESIS_DCHA >
  )+
  < EOF >
  {
    /* Correcto */
    return 0;
  }
}