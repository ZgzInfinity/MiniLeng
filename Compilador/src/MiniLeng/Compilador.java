/* Generated By:JavaCC: Do not edit this line. Compilador.java */
package MiniLeng;

import Util.Simbolo;
import Util.Simbolo.Tipo_simbolo;
import Util.Simbolo.Tipo_variable;
import Util.Simbolo.Clase_parametro;

import Util.Tabla_Simbolos;
import Util.TablaHash;
import Util.RegistroExp;

import Util.TipoOperador;
import Util.TipoOperador.Tipo_Operador_Aditivo;
import Util.TipoOperador.Tipo_Operador_Multiplicativo;
import Util.TipoOperador.Tipo_Operador_Relacional;

import Exceptions.ErrorLexico;
import Exceptions.ErrorSemantico;
import Exceptions.ErrorSintactico;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.io.FileWriter;
import java.io.PrintWriter;

public class Compilador implements CompiladorConstants {
  // IniCio del nivel de declaraciones anidadas
  public static int nivel = 0;

  // Variable de direccion por defecto a 0
  public static long dir = 0;

  public static Tabla_Simbolos tabla = new Tabla_Simbolos();

  public static void main(String args []) throws ParseException, IOException
  {
    /* nombre del fichero */
    String nombreArchivo;
    String path = "C:\u005c\u005cUsers\u005c\u005cGord\u005c\u005cDesktop\u005c\u005cprogramas\u005c\u005c";

    if (args [0].equals("-v"))
    {
      System.out.println("Compilacion en modo verbose");
      nombreArchivo = args [1];
    }
    else
    {
      System.out.println("Compilacion sin modo verbose");
      nombreArchivo = args [0];
    }

        // Ruta del fochero de escritura
    FileWriter ficheroCode = new FileWriter("C:\u005c\u005cUsers\u005c\u005cGord\u005c\u005cDesktop\u005c\u005cprogramas\u005c\u005c" + nombreArchivo + ".scode");
        PrintWriter pw = new PrintWriter(ficheroCode);

        pw.println("HOLA QUE TAL ESTAS");



    /* Completar la ruta del path */
    path += nombreArchivo + ".ml";
    System.out.println("LEYENDO FICHERO " + nombreArchivo + "\u005cn");
    try
    {
      /* Crear el parser con respecto al fichero */
      Compilador parser = new Compilador(new java.io.FileInputStream(path));
      // Inicializacion de la tabla de simbolos
      tabla.inicializar_tabla();
      int res = Compilador.programa();
      if (args [0].equals("-v"))
      {
        /* Mostrar total de tokens */
        TablaHash.mostrarTokensNormales();
        /* Mostrar total de identificadores */
        TablaHash.mostrarIdentificadores();
      }

      System.out.println("El fichero introducido es correcto");

          // Cierre asociado al flujo del fichero escritura
      ficheroCode.close();
    }
    catch (Exception e)
    {
      System.out.println("INCORRECTO");
      System.out.println(e.getMessage());
      Compilador.ReInit(System.in);
    }
    catch (Error e)
    {
      // Obtencion del error sintactico 
      int fila = CompiladorTokenManager.input_stream.getBeginLine();
      int columna = CompiladorTokenManager.input_stream.getBeginColumn();
      String tokenMalo = CompiladorTokenManager.input_stream.GetImage();
      ErrorLexico eL = new ErrorLexico(fila, columna, tokenMalo);
    }
  }

/* Construccion del analizador sintactico */

// Regla de programa
  static final public int programa() throws ParseException {
  Token tSim, t;
  Simbolo s;
  Simbolo.Tipo_simbolo tp_Sim;
    try {
      jj_consume_token(tPROGRAMA);
      // Guardado del nombre del programa
          t = jj_consume_token(tIDENTIFICADOR);
      // Insertar en la tabla de simbolos el token del programa
      // no se comprueba porque es el primero
      s = tabla.introducir_programa(t.image, dir);
      jj_consume_token(tPUNTYCOM);
      declaracion_variables();
      declaracion_acciones();
      bloque_sentencias();
      jj_consume_token(0);
      {if (true) return 0;}
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    {if (true) return 1;}
    }
    throw new Error("Missing return statement in function");
  }

// Regla de bloque_sentencias OK
  static final public void bloque_sentencias() throws ParseException {
  // Declaracion de variables
  Token t;
    try {
      jj_consume_token(tPRINCIPIO);
      lista_sentencias();
      t = jj_consume_token(tFIN);
      // Ocultar los parametros del nivel actual
      tabla.ocultar_parametros(nivel);
      // Detectado el fin de un bloque de sentencias
      // Mostrar el contenido de la tabla Hash

    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de lista_sentencias OK EN DUDA
  static final public void lista_sentencias() throws ParseException {
    try {
      label_1:
      while (true) {
        sentencia();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSI:
        case tMQ:
        case tESCRIBIR:
        case tLEER:
        case tIDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de sentencia OK
  static final public void sentencia() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tLEER:
        leer();
        jj_consume_token(tPUNTYCOM);
        break;
      case tESCRIBIR:
        escribir();
        jj_consume_token(tPUNTYCOM);
        break;
      case tIDENTIFICADOR:
        asig_invoc();
        break;
      case tSI:
        seleccion();
        break;
      case tMQ:
        mientras_que();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

  static final public void asig_invoc() throws ParseException {
  // Declaracion de variables
  Token t;
    try {
      // Pasar el token capturado como identificador a la invocacion de la accion
          t = jj_consume_token(tIDENTIFICADOR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tOPAS:
        asignacion(t);
        break;
      case tPUNTYCOM:
      case tPARENTESIS_IZDA:
        invocacion_accion(t);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de asignacion OK
  static final public void asignacion(Token t) throws ParseException {
  // Declaracion de variables
  RegistroExp tpExp;
  Simbolo s;
  Simbolo.Tipo_variable tipo = null;
  boolean ok = true;
    try {
      jj_consume_token(tOPAS);
       // Se busca el simbolo en la tabla de simbolos
       s = tabla.buscar_simbolo(t.image);
       // el simbolo se ha encontrado bien

       if (s == null)
       {
          // Excepcion de simbolo no encontrado
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Variable desconocida " + t.image +
          " en la parte izquierda de la asignacion");
         // Tipo de simbolo desconocido
         tipo = Simbolo.Tipo_variable.DESCONOCIDO;
         ok = false;
       }
       else if (s.es_Simbolo_Parametro() && s.es_Parametro_Valor())
       {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Prohibido asignar a " + s.getNombre() +
          ", es un parametro pasado como valor");
          // Tipo de simbolo desconocido
          tipo = Simbolo.Tipo_variable.DESCONOCIDO;
          ok = false;
       }
       else if (s.es_Simbolo_Accion())
       {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                ", columna " + token.beginColumn + "  - Prohibida la asignacion a la accion " + s.getNombre());
          // Tipo de simbolo desconocido
          tipo = Simbolo.Tipo_variable.DESCONOCIDO;
          ok = false;
       }
       else
       {
          tipo = s.getVariable();
       }
      // Procesamiento de la expresion
          tpExp = expresion();
      jj_consume_token(tPUNTYCOM);
      if (ok && tpExp.getTipo() != tipo && tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO)
      {
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Tipos incompatibles en la asignacion: " +
                "no se puede convetir " + tpExp.getTipo().toString() + " a " + tipo.toString());
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de lista_asignables OK
  static final public void lista_asignables() throws ParseException {
  //Declaracion de variables
  LinkedList < String > listaIdentificadores;
  // identificador a evaluar
  String idActual;
    try {
      // Retorno de la lista de identificadores
          listaIdentificadores = identificadores();
      // Tamaño de la lista de identificadores
      int dimension = listaIdentificadores.size();
      // Simbolo a evaluar
      Simbolo s;
      // Recorrido de la lista 
      for (int i = 0; i < dimension; i++)
      {
        // obtencion del i-esimo identificador
        idActual = listaIdentificadores.get(i);

        // Busqueda del simbolo en la tabla de simbolos
        s = tabla.buscar_simbolo(idActual);

        if (s == null)
        {
           ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Identificador de asignacion "
                                                                        + idActual + " desconocido");
        }
        else if (s.getTipo() == Simbolo.Tipo_simbolo.VARIABLE
        || s.getVariable() == Simbolo.Tipo_variable.DESCONOCIDO)
        {
          // es variable o desconocido
          if (s.es_Variable_Booleano() || s.es_Variable_Cadena())
          {
           // Error semantico en la lista de asignables
           ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Tipo invalido de variable de lectura, se espera " +
                                                                                                "entero o caracter");
          }
        }
        else if (s.es_Simbolo_Parametro() && s.es_Parametro_Valor())
        {
            // Error semantico en la lista de asignables
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Variable " + s.getNombre() +
                                                                                        " por valor en lectura");
        }
        else if (s.es_Simbolo_Accion())
        {
           // Error semantico en la lista de asignables
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Los argumentos de una funcion solo pueden ser" +
                " parametros o variables, encontrado " + s.getNombre() + " de tipo " + s.getTipo().toString());
        }
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de leer OK
  static final public void leer() throws ParseException {
    try {
      jj_consume_token(tLEER);
      jj_consume_token(tPARENTESIS_IZDA);
      lista_asignables();
      jj_consume_token(tPARENTESIS_DCHA);
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de escribir OK
  static final public void escribir() throws ParseException {
    try {
      jj_consume_token(tESCRIBIR);
      jj_consume_token(tPARENTESIS_IZDA);
      lista_escribibles();
      jj_consume_token(tPARENTESIS_DCHA);
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de lista_escribibles OK
  static final public void lista_escribibles() throws ParseException {
    try {
      escribible();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(tCOMA);
        escribible();
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de lista_escribibles OK
  static final public void escribible() throws ParseException {
  // Declaracion de variables
  Token t = null;
  Simbolo s;
  RegistroExp regExp = null;
  RegistroExp result = new RegistroExp();
  boolean constCad = false, entCad = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCONSTCHAR:
        t = jj_consume_token(tCONSTCHAR);
      constCad = true;
        break;
      case tCONSTCAD:
        t = jj_consume_token(tCONSTCAD);
      constCad = true;
        break;
      case tIDENTIFICADOR:
        t = jj_consume_token(tIDENTIFICADOR);
        break;
      case tENTACAR:
        jj_consume_token(tENTACAR);
        jj_consume_token(tPARENTESIS_IZDA);
        regExp = expresion();
        jj_consume_token(tPARENTESIS_DCHA);
          entCad = true;
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          if (constCad)
          {
            // La expresion es una cadena
            result.setTipo(Simbolo.Tipo_variable.CADENA);
          }
          else if (entCad)
          {
            if (regExp.getTipo() != Simbolo.Tipo_variable.ENTERO)
            {
              ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Se esperaba una expresion del tipo" +
                                                " ENTERO en la funcion entacar. Se ha recibido una expresion de tipo " +
                                                  regExp.getTipo().toString());
            }
            else
            {
                result.setTipo(Simbolo.Tipo_variable.ENTERO);
            }
          }
          else
          {
              // Lo busca bien el token en la tabla de simbolos
              s = tabla.buscar_simbolo(t.image);
                  if (s == null)
                  {
                    ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Variable a escribir " + s.getNombre()
                                                                                                        + " desconocida ");
                  }
              else if (s.es_Variable_Desconocido())
              {
                 ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Variable " + t.image + " no valida para escritura");
              }
              // Controlar despues los BOOLEANOS
           }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de invocacion accion OK
  static final public void invocacion_accion(Token t) throws ParseException {
  // Declaracion de variables
  Simbolo s = null;
  boolean args = false;
    try {
              // Busqueda del simbolo en la tabla
              s = tabla.buscar_simbolo(t.image);
              if (s == null)
              {
                ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Identificador " + t.image +
                                                                                                        " desconocido en llamada a accion");
              }
              // Busqueda con exito en la tabla de simbolos
              else if (!s.es_Simbolo_Accion())
              {
                 // error al invocar la accion
                 ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - No se puede realizar una llamada" +
                  " a una accion sobre el parametro " + t.image);
              }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPARENTESIS_IZDA:
        argumentos(s);
              args = true;
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(tPUNTYCOM);
              // Si la accion no existe
              if (s != null)
              {
                // Comprobar el numero de parametros en caso de que se llame sin ninguno
                int argc = s.getLista_parametros().size();
                if (!args && argc != 0)
                {
                        // Error por falta de parametros
                        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + " -  Se esperaban " + argc +
                        " parametros al invocar a la accion " + s.getNombre());
                }
              }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

//Regla de mientras que OK
  static final public void mientras_que() throws ParseException {
  // Declaracion de variables
  RegistroExp tpExp;
    try {
      jj_consume_token(tMQ);
      tpExp = expresion();
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO)
      && (tpExp.getTipo() != Simbolo.Tipo_variable.BOOLEANO))
      {
        // Error en la condicion del mientras que
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + " - La condicion de mientras_que debe ser booleana");
      }
      lista_sentencias();
      jj_consume_token(tFMQ);
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla para los argumentos OK
  static final public void argumentos(Simbolo s) throws ParseException {
  //Declaracion de variables
  boolean ok = false;
    try {
      jj_consume_token(tPARENTESIS_IZDA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMINUS:
      case tNOT:
      case tTRUE:
      case tFALSE:
      case tENTACAR:
      case tCARAENT:
      case tCONSTCHAR:
      case tCONSTCAD:
      case tCONSTANTE_NUMERICA:
      case tIDENTIFICADOR:
      case tPARENTESIS_IZDA:
        lista_expresiones(s);
      // Captura bien la expresion
      ok = true;
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      jj_consume_token(tPARENTESIS_DCHA);
       // Comprobar los parametros de la invocacion en caso de que
       // se invoque con parametros distintos
           if (s != null)
           {
                   // Si la accion existe
           int argc = s.getLista_parametros().size();

           if (!ok && argc != 0)
           {
                        // Error de invocacion de parametros
                        ErrorSemantico ESM = new ErrorSemantico("linea " + token.beginLine +
                        " - Se esperaban " + argc + " parametros al invocar a la accion " +
                        s.getNombre());
                }
        }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de lista de expresiones
  static final public void lista_expresiones(Simbolo s) throws ParseException {
  // Declaracion de variables
  RegistroExp r;
  int argc = 0;
  boolean ok = true;
  LinkedList < Simbolo > parametros;
    try {
      // Captura de la primera expresion
          r = expresion();
      if (s != null && !s.es_Variable_Desconocido())
      {
        // Obtencion de la lista de parametros de la accion
        parametros = s.getLista_parametros();

        argc++;

        // Numero de parametros incorrecto
        if (argc > parametros.size())
        {
          ErrorSemantico eMS = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - El numero de parametros de" +
          " llamada a la funcion " + s.getNombre() +
          " no coindice, se esperaban " + parametros.size());
          ok = false;
        }
        else if (r.getTipo() != parametros.get(argc - 1).getVariable())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Los tipos en la llamada a la funcion " +
          s.getNombre() + " no coindicen");
          ok = false;
        }
        else if (r.getClase() == Simbolo.Clase_parametro.VAL && !parametros.get(argc - 1).es_Parametro_Valor())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Error al pasar un parametro por valor como referencia");
          ok = false;
        }
        else if (parametros.get(argc - 1).es_Parametro_Referencia() && r.isExpr_compuesta())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - No se puede pasar al parametro por referencia " +
                        parametros.get(argc - 1).getNombre () + " una expresion compuesta");
          ok = false;
        }
        else
        {
          // Todo ha ido bien
          ok = false;
        }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        jj_consume_token(tCOMA);
        // Procesamiento de la nueva expresion
            r = expresion();
      if (s != null && !s.es_Variable_Desconocido())
      {
        // Obtencion de la lista de parametros de la accion
        parametros = s.getLista_parametros();
        argc++;
        // Numero de parametros incorrecto
        if (argc > parametros.size())
        {
          ErrorSemantico eMS = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - El numero de parametros de" +
                        " llamada a la funcion " + s.getNombre() +
                        " no coindice, se esperaban " + parametros.size());
          ok = false;
        }
        // Comprobacion de los tipos en la funcion AQUI ESTAMOS
        else if (r.getTipo() != parametros.get(argc - 1).getVariable())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Los tipos en la llamada a la funcion" +
                        s.getNombre() + " no coindicen");
          ok = false;
        }
        else if (r.getClase() == Simbolo.Clase_parametro.VAL && !parametros.get(argc - 1).es_Parametro_Valor())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Error al pasar un parametro por valor como referencia");
          ok = false;
        }
        else if (parametros.get(argc - 1).es_Parametro_Referencia() && r.isExpr_compuesta())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - No se puede pasar al parametro por referencia " +
                        parametros.get(argc - 1).getNombre () + " una expresion compuesta");
          ok = false;
        }
        else
        {
          // Todo ha ido bien
          ok = false;
        }
      }
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de expresion OK
  static final public RegistroExp expresion() throws ParseException {
  // Declaracion de expresiones a analizar
  RegistroExp tpExp1 = null, tpExp2 = null;
  TipoOperador op;
  boolean ok = true;
  RegistroExp regResult = new RegistroExp();
  boolean constantes = false;
    try {
      // Obtencion de la primera expresion
          tpExp1 = expresion_simple();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tMAYOR:
        case tMENOR:
        case tIGUAL:
        case tMAI:
        case tMEI:
        case tNI:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_4;
        }
        op = operador_relacional();
        // Obtencion de la segunda expresion
            tpExp2 = expresion_simple();
      // Evaluacion de la expresion
      // Resultado de evaluar la expresion
      regResult = new RegistroExp();

      // Evaluar primer termino de la expresion
      if (tpExp1.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
      {
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - El operador 1 debe ser entero " +
                        "caracter, cadena o booleano");
        ok = false;
      }
      // Evaluar segundo termino de la expresion
      if (tpExp2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
      {
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - El operador 2 debe ser entero " +
                        "caracter, cadena o booleano");
        ok = false;
      }
      // Comprobar que todo ha ido bien y evaluar la expresion
      if (ok)
      {
        // Verficar que los dos operandos son del mismo tipo
        if (tpExp1.getTipo() != tpExp2.getTipo())
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Los operadores deben ser del mismo tipo " +
                        " en la expresion " + tpExp1.getTipo().toString() + " : " + tpExp2.getTipo().toString());

              regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          // Tipo de la nueva expresion
          regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);

          // Evaluacion del tipo de la expresion
          switch (tpExp1.getTipo())
          {
            // La expresion puede ser entera
            case ENTERO :
            // Comprobar que la segunda expresion es tambien entera
            ok = tpExp2.getTipo() == Simbolo.Tipo_variable.ENTERO;

            // Tipo de la nueva expresion
            regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);

            if (!ok)
            {
              // Resul tiene tipo DESCONOCIDO porque no coinciden
              regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            }
            // Son constantes
            else if (tpExp1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
                && tpExp2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
                          constantes = true;
              regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
              switch (op.getOperadorRelacional())
              {
                case MAYOR :
                regResult.valorBool = tpExp1.valorEnt > tpExp2.valorEnt;
                break;
                case MAYOR_IGUAL :
                regResult.valorBool = tpExp1.valorEnt >= tpExp2.valorEnt;
                break;
                case IGUAL :
                regResult.valorBool = tpExp1.valorEnt == tpExp2.valorEnt;
                break;
                case NO_IGUAL :
                regResult.valorBool = tpExp1.valorEnt != tpExp2.valorEnt;
                break;
                case MENOR_IGUAL :
                regResult.valorBool = tpExp1.valorEnt <= tpExp2.valorEnt;
                break;
                case MENOR :
                regResult.valorBool = tpExp1.valorEnt < tpExp2.valorEnt;
                break;
                default :
                break;
              }
            }
            break;
            case CHAR:
            // Cmprobar que la segunda expresion es una cadena

            // El tipo es booleano
                regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);

            ok = tpExp2.getTipo() == Simbolo.Tipo_variable.CHAR;
            if (!ok)
            {
              regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            }
            // Los datos son constantes y se puede trabajar
            else if (tpExp1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
                && tpExp2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
                  constantes = true;
                                  switch (op.getOperadorRelacional())
                      {
                        case IGUAL :
                        regResult.valorBool = tpExp1.valorString.equals(tpExp2.valorString);
                        break;
                        case NO_IGUAL :
                        regResult.valorBool = !tpExp1.valorString.equals(tpExp2.valorString);
                        break;
                        default :
                        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                                        ", columna " + token.beginColumn + "  - No se puede" +
                                " utilizar el operador relacional " + op.getOperadorRelacional().toString() +
                                " sobre caracteres");
                      }
            }
            break;
            case BOOLEANO :
            // Cmprobar que la segunda expresion es una cadena

            // El tipo es booleano
                regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);

            ok = tpExp2.getTipo() == Simbolo.Tipo_variable.BOOLEANO;
            if (!ok)
            {
              regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            }
            else if(tpExp1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
                && tpExp2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
              constantes = true;
              // Son constantes
              switch (op.getOperadorRelacional())
              {
                case IGUAL :
                regResult.valorBool = tpExp1.valorBool == tpExp2.valorBool;
                break;
                case NO_IGUAL :
                regResult.valorBool = tpExp1.valorBool != tpExp2.valorBool;
                break;
                default :
                ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                                ", columna " + token.beginColumn + "  - No se puede" +
                        " utilizar el operador " + op.getOperadorRelacional().toString() +
                        " sobre una booleano");
              }
            }
            break;
            case DESCONOCIDO :
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            break;
            default :
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - El operador relacional es" +
                " desconocido");
          }
        }
        if (ok && !constantes)
        {
          // Es expresion compuesta
          regResult.setExpr_compuesta(true);
        }
      }
      }
      // Comprobar que la expresion es compuesta
      if (tpExp2 == null)
      {
        {if (true) return tpExp1;}
      }
      else
      {
        {if (true) return regResult;}
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// Regla de operador_relacional OK
  static final public TipoOperador operador_relacional() throws ParseException {
  // Declaracion de variables
  TipoOperador op = new TipoOperador();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIGUAL:

        jj_consume_token(tIGUAL);
      // Es el operador =
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.IGUAL);
      {if (true) return op;}
        break;
      case tMENOR:
        jj_consume_token(tMENOR);
      // Es el operador <
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MENOR);
      {if (true) return op;}
        break;
      case tMEI:
        jj_consume_token(tMEI);
      // Es el operador <=
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MENOR_IGUAL);
      {if (true) return op;}
        break;
      case tNI:
        jj_consume_token(tNI);
      // Es el operador <>
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.NO_IGUAL);
      {if (true) return op;}
        break;
      case tMAI:
        jj_consume_token(tMAI);
      // Es el operador >=
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MAYOR_IGUAL);
      {if (true) return op;}
        break;
      case tMAYOR:
        jj_consume_token(tMAYOR);
      // Es el operador >
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MAYOR);
      {if (true) return op;}
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// Regla operador aditivo OK
  static final public TipoOperador operador_aditivo() throws ParseException {
  // Declaracion de variables
  TipoOperador op = new TipoOperador();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPLUS:
        jj_consume_token(tPLUS);
      // El operador es una suma
      op.setOperadorAditivo(TipoOperador.Tipo_Operador_Aditivo.SUMA);
      {if (true) return op;}
        break;
      case tMINUS:
        jj_consume_token(tMINUS);
      // El operaodr es una resta
      op.setOperadorAditivo(TipoOperador.Tipo_Operador_Aditivo.RESTA);
      {if (true) return op;}
        break;
      case tOR:
        jj_consume_token(tOR);
      // El operador es un OR
      op.setOperadorAditivo(TipoOperador.Tipo_Operador_Aditivo.OR);
      {if (true) return op;}
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// regla de expresion simple OK
  static final public RegistroExp expresion_simple() throws ParseException {
  // Declaracion de variables
  RegistroExp regTerm1 = null, regTerm2 = null, regResult = null;
  TipoOperador op;
  boolean ok;
  boolean constantes = false;
    try {
      // Primer termino de la expresion
          regTerm1 = termino();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tPLUS:
        case tMINUS:
        case tOR:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        // Operador de la expresion
            op = operador_aditivo();
        // Segundo termino de la expresion
            regTerm2 = termino();
      // Resultado de evaluar la expresion
      regResult = new RegistroExp();
      ok = true;
      // Evaluar el simbolo introducido
      if (op.getOperadorAditivo() == TipoOperador.Tipo_Operador_Aditivo.OR)
      {
        // Comprobar que son los dos booleanos
        ok = regTerm1.getTipo() == Simbolo.Tipo_variable.BOOLEANO
        && regTerm2.getTipo() == Simbolo.Tipo_variable.BOOLEANO;
        if (!ok)
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " +
                                                regTerm1.getTipo().toString() + " y " + regTerm2.getTipo().toString());
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          // Comprobar que son desconocidos
          if (regTerm1.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO
          || regTerm2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
          {
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
          }
          else
          {
            // Son los dos booleanos
            regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);

                        // Si son constantes calculamos la expresion
            if (regTerm1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
                && regTerm2.getSimbolo() != Simbolo.Tipo_simbolo.CONST)
            {
                constantes = true;
                regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
                regResult.valorBool = regTerm1.valorBool | regTerm2.valorBool;
            }
          }
        }
      }
      // No es operador OR
      else
      {
        // Comprobar que son los dos enteros

        ok = regTerm1.getTipo() == Simbolo.Tipo_variable.ENTERO
        && regTerm2.getTipo() == Simbolo.Tipo_variable.ENTERO;
        if (!ok)
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " +
                                                regTerm1.getTipo().toString() + " y " + regTerm2.getTipo().toString());

          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        // Comprobar que no son desconocidos
        else if (regTerm1.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO
        && regTerm2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
        {
          // El resultado es desconocido
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          // La expresion final es entera
          regResult.setTipo(Simbolo.Tipo_variable.ENTERO);
          if (ErrorSemantico.hayDesbordamientoEntero(regTerm1.getValorEnt())
          || ErrorSemantico.hayDesbordamientoEntero(regTerm2.getValorEnt()))
          {
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Valor fuera del rango");
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
          }
          else
          {
            // Comprobar que son constantes
            if (regTerm1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
                && regTerm2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
                constantes = true;
                regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
                    switch (op.getOperadorAditivo())
                    {
                      case SUMA :
                      regResult.valorEnt = regTerm1.valorEnt + regTerm2.valorEnt;
                      break;
                      case RESTA :
                      regResult.valorEnt = regTerm1.valorEnt - regTerm2.valorEnt;
                      break;
                      default :
                      ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Operador aditivo desconocido");
                    }
                }
          }
        }
      }
      if (ok && !constantes)
      {
        regResult.setExpr_compuesta(true);
      }
      }
      // Comprobar que la expresion simple es compuesta
      if (regTerm2 == null)
      {
        {if (true) return regTerm1;}
      }
      else
      {
        {if (true) return regResult;}
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// LOS OPERADORES SON AND Y ESAS MIERDAS EH
// Regla de termino OK
  static final public RegistroExp termino() throws ParseException {
  // Declaracion de factores y expresiones
  RegistroExp tpFactor1 = null, tpFactor2 = null, regResult = null;
  // Declaracion del operador
  TipoOperador op;
  boolean ok;
  boolean constantes = false;;
    try {
      // Evaluacion del primer factor
          tpFactor1 = factor();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tMULTIPLY:
        case tDIVIDE:
        case tAND:
        case tMOD:
        case tDIV:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_6;
        }
        // Evaluacion del operador multiplicativo
            op = operador_multiplicativo();
        // Evaluacion del segundo factor
            tpFactor2 = factor();
      regResult = new RegistroExp();
      // El operaodr es una AND
      if (op.getOperadorMultiplicativo() == TipoOperador.Tipo_Operador_Multiplicativo.AND)
      {
        // Comprobar que son los dos booleanos
        ok = tpFactor1.getTipo() == Simbolo.Tipo_variable.BOOLEANO
        && tpFactor2.getTipo() == Simbolo.Tipo_variable.BOOLEANO;
        if (!ok)
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " +
                                                tpFactor1.getTipo().toString() + " y " + tpFactor2.getTipo().toString());

          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else if (tpFactor2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO
        || tpFactor2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
        {
          // El resultado es desconocido
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);

          if (tpFactor1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
                 && tpFactor2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
          {
                        // Hacer operacion AND
                regResult.valorBool = tpFactor1.valorBool & tpFactor2.valorBool;
            regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
          }
        }
      }
      else
      {
        // Es un operador multiplicativo distinto de AND
        ok = tpFactor1.getTipo() == Simbolo.Tipo_variable.ENTERO
        && tpFactor2.getTipo() == Simbolo.Tipo_variable.ENTERO;
        if (!ok)
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " +
                                                tpFactor1.getTipo().toString() + " y " + tpFactor2.getTipo().toString());

          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          regResult.setTipo(Simbolo.Tipo_variable.ENTERO);
          if (ErrorSemantico.hayDesbordamientoEntero(tpFactor1.valorEnt)
          || ErrorSemantico.hayDesbordamientoEntero(tpFactor2.valorEnt))
          {
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Valor fuera del rango");
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
          }
          else
          {
            // Comprobar que son constantes para operar
            if (tpFactor1.getSimbolo() == Simbolo.Tipo_simbolo.CONST
                && tpFactor2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
                                constantes = true;
                // El resultado tambien es constante
                regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);

                    switch (op.getOperadorMultiplicativo())
                    {
                      case MULTIPLICACION :
                      regResult.valorEnt = tpFactor1.valorEnt * tpFactor2.valorEnt;
                      break;
                      case DIVISION :
                      if (tpFactor2.valorEnt == 0)
                      {
                        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Division por 0");
                        regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
                      }
                      else
                      {
                        regResult.valorEnt = tpFactor1.valorEnt / tpFactor2.valorEnt;
                      }
                      break;
                      case MOD :
                      if (tpFactor2.valorEnt == 0)
                      {
                        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Modulo por 0");
                        regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
                      }
                      else
                      {
                        regResult.valorEnt = tpFactor1.valorEnt % tpFactor2.valorEnt;
                      }
                      break;
                      default :
                      ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Operador multiplicativo desconocido");
                    }
                 }
          }
        }
      }
      if (ok && !constantes) {
        // Es expresion compuesta
        regResult.setExpr_compuesta(true);
      }
      }
      // Comprobar que es expresion compuesta
          if (tpFactor2 == null)
          {
            {if (true) return tpFactor1;}
          }
          else
          {
            {if (true) return regResult;}
          }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// Regla de operador multiplicativo OK
  static final public TipoOperador operador_multiplicativo() throws ParseException {
  // Declaracion de variables
  TipoOperador op = new TipoOperador();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMULTIPLY:
        jj_consume_token(tMULTIPLY);
      // El operador es una multiplicacion
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.MULTIPLICACION);
      {if (true) return op;}
        break;
      case tDIVIDE:
        jj_consume_token(tDIVIDE);
      // El operador es un cociente (opcion 1)
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.DIVISION);
      {if (true) return op;}
        break;
      case tDIV:
        jj_consume_token(tDIV);
      // El operador es un cociente (opcion 2)
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.DIVISION);
      {if (true) return op;}
        break;
      case tMOD:
        jj_consume_token(tMOD);
      // El operador es un modulo o residuo
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.MOD);
      {if (true) return op;}
        break;
      case tAND:
        jj_consume_token(tAND);
      // El operador es una AND logica
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.AND);
      {if (true) return op;}
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// Regla de factor OK
  static final public RegistroExp factor() throws ParseException {
  // Declaracion de factores y expresiones
  RegistroExp tpFactor, tpExp;
  RegistroExp result = new RegistroExp();
  // Token a procesar
  Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tNOT:
        jj_consume_token(tNOT);
        tpFactor = factor();
      // Comprobacion de si es o no booleano
      if ((tpFactor.getTipo() != Simbolo.Tipo_variable.BOOLEANO)
      && (tpFactor.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        // Comprobacion de si es booleano o no 
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Tipo " + tpFactor.getTipo() + " incompatible con " +
                                                                " operador <>. Se esperaba BOOLEANO ");

        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
        result.setTipo(Simbolo.Tipo_variable.BOOLEANO);
      }
      // Devuelve el tipo de factor
      {if (true) return result;}
        break;
      case tMINUS:
        jj_consume_token(tMINUS);
        tpFactor = factor();
      // Comprobacion de si es o no booleano
      if ((tpFactor.getTipo() != Simbolo.Tipo_variable.ENTERO)
      && (tpFactor.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        // Comprobacion de si es booleano o no 
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Tipo " + tpFactor.getTipo().toString() +
                                " incompatible con operador -. Se esperaba ENTERO");

        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
        result.setTipo(Simbolo.Tipo_variable.ENTERO);
      }
      // Devuelve el tipo de factor
      {if (true) return result;}
        break;
      case tPARENTESIS_IZDA:
        jj_consume_token(tPARENTESIS_IZDA);
        tpExp = expresion();
        jj_consume_token(tPARENTESIS_DCHA);
      // Devuelve la expresiom normal
      {if (true) return tpExp;}
        break;
      case tENTACAR:
        t = jj_consume_token(tENTACAR);
        jj_consume_token(tPARENTESIS_IZDA);
        tpExp = expresion();
        jj_consume_token(tPARENTESIS_DCHA);
      // Comprobacion de si es entera la expresion
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.ENTERO)
      && (tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        // Comprobacion de si es booleano o no 
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Argumento de tipo " + tpExp.getTipo().toString() +
                        " incompatible en funcion ENTACAR. Se esperaba ENTERO");

        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
         // Es un entero y se comprueba que no hay desbordamiento
        int valor = tpExp.getValorEnt();

        // Error de desbordamiento
        if (ErrorSemantico.hayDesbordamientoEntacar(valor))
        {
          // Comprobacion de si es booleano o no 
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - La operacion ENTACAR debe recibir un par\u00e1metro " +
                                                                        "del tipo entero comprendido entre 0 y 255");
        }
        else
        {
            // Comprobar que es constante
                if (tpExp.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
                {
                                // Extraigo el numero entero y lo guardo a caracter
                        result.setValorString(String.valueOf((char)valor));
                        result.setTipo(Simbolo.Tipo_variable.CHAR);
                        }
                        else
                        {
                          // GENERADOR DE CODIGO
                        }
                // Lo guardo en CHAR    
                result.setTipo(Simbolo.Tipo_variable.CHAR);
        }
      }
      {if (true) return result;}
        break;
      case tCARAENT:
        jj_consume_token(tCARAENT);
        jj_consume_token(tPARENTESIS_IZDA);
        tpExp = expresion();
        jj_consume_token(tPARENTESIS_DCHA);
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.CHAR)
      && (tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        // Comprobacion de si es o no caracter
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Argumento de tipo " + tpExp.getTipo().toString() +
                        " incompatible en funcion CARAENT. Se esperaba CARACTER");

        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
        if (tpExp.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
        {
                // Obtener el tipo de dato entero del caracter porque es cosnstante
                char cadena = tpExp.valorString.charAt(0);
                result.setValorEnt((int)cadena);
        }
        else
        {
          // No es constante
        }
        result.setTipo(Simbolo.Tipo_variable.ENTERO);
      }
      {if (true) return result;}
        break;
      case tIDENTIFICADOR:
        t = jj_consume_token(tIDENTIFICADOR);
                Simbolo s;
            // Busqueda en la tabla de simbolos	
                s = tabla.buscar_simbolo(t.image);
                if (s == null)
                {
                ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Variable " + t.image + " no definida");
                    tabla.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, 0);
                result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
                }
                else if (s.es_Simbolo_Accion())
                {
                   ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - La accion " + s.getNombre() + " no puede " +
                        " formar parte de una expresion");
                    tabla.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, 0);
                result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
                }
                else
                {
                    result.setTipo(s.getVariable());
                    result.setClase(s.getParametro());
                }
                {if (true) return result;}
        break;
      case tCONSTANTE_NUMERICA:
        t = jj_consume_token(tCONSTANTE_NUMERICA);
      // Y si es entacar
      int valor = Integer.parseInt(t.image);
      result.setValorEnt(valor);
      // Tipo de la variable entero
      result.setTipo(Simbolo.Tipo_variable.ENTERO);

          // El simbolo es una constante
      result.setSimbolo(Simbolo.Tipo_simbolo.CONST);

      // Devolucion del resultado
      {if (true) return result;}
        break;
      case tCONSTCHAR:
        t = jj_consume_token(tCONSTCHAR);
      if(t.image.length() > 3) {
                ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - No se puede usar el caracter " + t.image +
                                                                                                 " en una expresion");
          }
          else {
                // El simbolo es una constante
                result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
                        result.valorString = String.valueOf(t.image.charAt(1));
          }
          result.setTipo(Simbolo.Tipo_variable.CHAR);
          {if (true) return result;}
        break;
      case tCONSTCAD:
        t = jj_consume_token(tCONSTCAD);
      if(t.image.length() > 3) {
                ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - No se puede usar la cadena " + t.image +
                                                                                                " en una expresion");
          }
          else {
                // No coger las comillas
                // El simbolo es una constante
                result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
                        result.valorString = String.valueOf(t.image.charAt(1));
          }
          result.setTipo(Simbolo.Tipo_variable.CADENA);
          {if (true) return result;}
        break;
      case tTRUE:
        jj_consume_token(tTRUE);
      // El simbolo es una constante
      result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
      // Guardar el contenido de la cadena
      result.setValorBool(true);
      // Tipo cadena de caracteres
      result.setTipo(Simbolo.Tipo_variable.BOOLEANO);
      // Devolucion del resultado
      {if (true) return result;}
        break;
      case tFALSE:
        jj_consume_token(tFALSE);
      // El simbolo es una constante
      result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
      // Guardar el contenido de la cadena
      result.setValorBool(false);
      // Tipo cadena de caracteres
      result.setTipo(Simbolo.Tipo_variable.BOOLEANO);
      // Devolucion del resultado
      {if (true) return result;}
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// Regla de seelccion OK
  static final public void seleccion() throws ParseException {
  // Declaracion de variables
  RegistroExp tpExp;
    try {
      jj_consume_token(tSI);
      tpExp = expresion();
      // Evaluacion de la condicion
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO)
      && (tpExp.getTipo() != Simbolo.Tipo_variable.BOOLEANO))
      {
        // Se esperaba una condicion booleana
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - La condicion en la seleccion debe ser un booleano");
      }
      jj_consume_token(tENT);
      lista_sentencias();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tSI_NO:
        jj_consume_token(tSI_NO);
        lista_sentencias();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(tFSI);
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de declaracion_acciones OK
  static final public void declaracion_acciones() throws ParseException {
    try {
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tACCION:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_7;
        }
        declaracion_accion();
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de declaracion_Accion OK
  static final public void declaracion_accion() throws ParseException {
    try {
      cabecera_accion();
      jj_consume_token(tPUNTYCOM);
      declaracion_variables();
      declaracion_acciones();
      bloque_sentencias();
      // Eliminacion de variables
      tabla.eliminar_variables(nivel);
      // Eliminar las acciones
      tabla.eliminar_acciones(nivel);
      // Eliminar los parametros ocultos
      tabla.eliminar_parametros_ocultos(nivel);
      // Decrementar el nivel porque se cierra un bloque       
      nivel--;
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de cabecera_accion OK
  static final public void cabecera_accion() throws ParseException {
  Token tId;
  Simbolo s = null;
  Simbolo.Tipo_simbolo tp_Sim;
  boolean ok = false;
  // Lista de parametros de la accion
  LinkedList < LinkedList < Simbolo > > listaDeParametros = new LinkedList < LinkedList < Simbolo > > ();
    try {
      jj_consume_token(tACCION);
      tId = jj_consume_token(tIDENTIFICADOR);
        // Buscar el simbolo en la tabla de simbolos
        s = tabla.buscar_simbolo(tId.image);

        if ((s == null) || (s.getNivel() != nivel))
        {
                // Introducir accion en la tabla de simbolos
                s = tabla.introducir_accion(tId.image, nivel, dir);
                ok = true;
        }
        else
        {
            ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Accion " + s.getNombre() + " duplicada");
            ok = false;
        }
      // Incrementar el nivel actual
      nivel++;
      // Procesamiento de los parametros
          listaDeParametros = parametros_formales(tId);
      // Limpiar parametros de la posible acc
      if (ok)
      {
        for (int i = 0; i < listaDeParametros.size(); i++)
        {
          // Añadir la lista de parametros al simbolo
          s.anyadirParametrosAccion(listaDeParametros.get(i));
        }
        // Limpiar parametros de la posible accion anterior
        tabla.limpiarListaParametros();
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla de parametros formales OK
  static final public LinkedList < LinkedList < Simbolo > > parametros_formales(Token t) throws ParseException {
  // Lista global de listas de identificadores
  LinkedList < LinkedList < Simbolo > > parametros = new LinkedList < LinkedList < Simbolo > > ();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPARENTESIS_IZDA:
        parametros = lista_parametros();
      tabla.asignarListaParametros(parametros);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      {if (true) return tabla.getListasParametros();}
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// Regla para lista_parametros OK
  static final public LinkedList < LinkedList < Simbolo > > lista_parametros() throws ParseException {
  // Lista global de listas de identificadores
  LinkedList < LinkedList < Simbolo > > listaGlobal = new LinkedList < LinkedList < Simbolo > > ();
  // Lista de identificadores
  LinkedList < Simbolo > lista = new LinkedList < Simbolo > ();
    try {
      jj_consume_token(tPARENTESIS_IZDA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tVAL:
      case tREF:
        lista = parametros();
        listaGlobal.add(lista);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case tPUNTYCOM:
            ;
            break;
          default:
            jj_la1[18] = jj_gen;
            break label_8;
          }
          jj_consume_token(tPUNTYCOM);
          lista = parametros();
        listaGlobal.add(lista);
        }
        jj_consume_token(tPARENTESIS_DCHA);
      {if (true) return listaGlobal;}
        break;
      case tPARENTESIS_DCHA:
        jj_consume_token(tPARENTESIS_DCHA);
       {if (true) return listaGlobal;}
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// Regla de parametros OK
  static final public LinkedList < Simbolo > parametros() throws ParseException {
  // Declaracion de variables
  // Simbolo a guardar en la tabla de simbolos
  Simbolo s;
  // Clase de parametro y tipo de variable del simbolo a introducir
  Simbolo.Clase_parametro cl_Param;
  Simbolo.Tipo_variable tipo_Var;
  // Lista de simbolos leidos a almacenar en la tabla de simbolos
  LinkedList < Simbolo > lista = new LinkedList < Simbolo > ();
  // Lista de identificadores procesados
  LinkedList < String > listaIdentificadores = new LinkedList < String > ();
    try {
      // Lectura del tipo de clase y del tipo de parametro
          cl_Param = clase_parametros();
      tipo_Var = tipos_variables();
      listaIdentificadores = identificadores();
      // Tamaño de la lista de identificadores
      int dimension = listaIdentificadores.size();


      // Identificador del simbolo a procesar
      String identificadorActual;

      // Bucle de recorrido de la lista de identificadores
      for (int i = 0; i < dimension; i++)
      {
        // Obtener identificador actual
        identificadorActual = listaIdentificadores.get(i);

        // Comprobar que existe o no simbolo en la tabla

        // Insercion del parametro en la tabla de simbolos
        s = tabla.introducir_parametro(identificadorActual, tipo_Var, cl_Param, nivel, dir);

                // Si se ha creado el simbolo
        if (s != null)
        {
           // Añadir parametro a la lista de parametros
                lista.add(s);
        }
        else
        {
          // Comprobar que la variable esta en la tabla de simbolos
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Parametro repetido " + identificadorActual);
        }
      }
      {if (true) return lista;}
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// Regla de declaracion variables OK
  static final public void declaracion_variables() throws ParseException {
  // Declaracion de variables 
  Token t;
    try {
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tENTERO:
        case tBOOLEANO:
        case tCARACTER:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_9;
        }
        declaracion();
        t = jj_consume_token(tPUNTYCOM);
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla para los tipos de variables OK
  static final public Simbolo.Tipo_variable tipos_variables() throws ParseException {
  // Declaracion de variable
  Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tENTERO:
        t = jj_consume_token(tENTERO);
        break;
      case tCARACTER:
        t = jj_consume_token(tCARACTER);
        break;
      case tBOOLEANO:
        t = jj_consume_token(tBOOLEANO);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      // Control del tipo token
      switch (t.kind)
      {
        case tENTERO :
        // Es token tENTERO
        {if (true) return Simbolo.Tipo_variable.ENTERO;}
        break;
        case tCARACTER :
        // Es token tCARACTER
        {if (true) return Simbolo.Tipo_variable.CHAR;}
        break;
        case tCONSTCAD :
        // Es token tCARACTER
        {if (true) return Simbolo.Tipo_variable.CADENA;}
        break;
        case tBOOLEANO :
        // Es token tBOOLEANO
        {if (true) return Simbolo.Tipo_variable.BOOLEANO;}
        break;
        default :
        // No es niguno de los anteriores es DESCONOCIDO
        {if (true) return Simbolo.Tipo_variable.DESCONOCIDO;}
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// Regla de declaracion OK
  static final public void declaracion() throws ParseException {
  // Declaracion de variables
  Token t;
  Simbolo.Tipo_variable tp_Var;
  LinkedList < String > lista = new LinkedList < String > ();
  // Variable para guardar el identificador del simbolo a introducir
  String identificadorActual;
  Simbolo s;
    try {
      tp_Var = tipos_variables();
      lista = identificadores();
      // Tamaño de la lista de identificadores
      int dimension = lista.size();
      //Bucle de recorrido de insercion de variables
      for (int i = 0; i < dimension; i++)
      {
        // Obtencion del identificador actual
        identificadorActual = lista.get(i);
        // Simbolo ya existente en la tabla de simbolos

        // introducir el nuevo simbolo
        s = tabla.introducir_variable(identificadorActual, tp_Var, nivel, dir);

                // Comprobar que la variable esta en la tabla de simbolos
        if (s == null)
        {
          ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - Variable repetida " + identificadorActual);
        }
      }
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
  }

// Regla para los identificadores OK
  static final public LinkedList < String > identificadores() throws ParseException {
  // Declaracion de una lista auxiliar de identificadores
  Token t;
  // Lista de identificadores (parametros o variables)
  LinkedList < String > listaIdentificadores = new LinkedList < String > ();
    try {
      // Coger primer identificador
          t = jj_consume_token(tIDENTIFICADOR);
      // Añadir el identificador a lista
      listaIdentificadores.add(t.image);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_10;
        }
        jj_consume_token(tCOMA);
        // Coger los siguientes identificadores
            t = jj_consume_token(tIDENTIFICADOR);
      // Añadir el identificador a lista
      listaIdentificadores.add(t.image);
      }
      {if (true) return listaIdentificadores;}
    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

// Regla para las clases de parametros OK
  static final public Simbolo.Clase_parametro clase_parametros() throws ParseException {
  // Declaracion de variables
  Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tVAL:
        t = jj_consume_token(tVAL);
        break;
      case tREF:
        t = jj_consume_token(tREF);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (t.kind == tVAL)
      {
        // Es token tVAL
        {if (true) return Simbolo.Clase_parametro.VAL;}
      }
      else if (t.kind == tREF)
      {
        // Es tokeb tREF
        {if (true) return Simbolo.Clase_parametro.REF;}
      }
      else
      {
        // Clase de parametro erroneo
        ErrorSemantico eSM = new ErrorSemantico("linea " + token.beginLine +
                        ", columna " + token.beginColumn + "  - La clase de parametro no es correcta");
      }
      // El tipo de clase ha sido procesada

    } catch (ParseException e) {
    ErrorSintactico eS = new ErrorSintactico(e);
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[24];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x88000000,0x88000000,0x80000,0x0,0x0,0x0,0x400400,0x0,0x7e000,0x7e000,0x200600,0x200600,0x101800,0x101800,0x400400,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x100006,0x100006,0xa00000,0x400000,0x160400,0x800000,0x9e0f00,0x400000,0x0,0x0,0x0,0x0,0x18,0x18,0x9e0f00,0x0,0x1000,0x800000,0x200000,0x1006000,0xe0,0xe0,0x400000,0x6000,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 24; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 24; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
