/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options
{
  static = true;
  ignore_case = true;
}

PARSER_BEGIN(Compilador)
package MiniLeng;
import Util.Simbolo;
import Util.Simbolo.Tipo_simbolo;
import Util.Simbolo.Tipo_variable;
import Util.Simbolo.Clase_parametro;
import Util.Tabla_Simbolos;
import Util.TablaHash;
import Util.RegistroExp;
import Util.Etiqueta;
import Util.TipoOperador;
import Util.TipoOperador.Tipo_Operador_Aditivo;
import Util.TipoOperador.Tipo_Operador_Multiplicativo;
import Util.TipoOperador.Tipo_Operador_Relacional;
import Exceptions.ErrorLexico;
import Exceptions.ErrorSemantico;
import Exceptions.ErrorSintactico;
import Warnings.DesbordamientoEnteros;
import java.io.File;
import java.io.IOException;
import java.util.LinkedList;
import java.io.FileWriter;
import java.io.PrintWriter;

public class Compilador
{
  public static int nivel = 0;

  static final int DIRECCION_INICIAL = 3;
  static final int RETORNO_CARRO = 10;
  static final int SALTO_LINEA = 13;
  static final int TABULADOR = 9;
  
  public static long dir = DIRECCION_INICIAL;

  public static PrintWriter pw;

  public static Tabla_Simbolos tabla = new Tabla_Simbolos();
  
  public static Etiqueta etiq = new Etiqueta();
  
  public static ErrorLexico eL = new ErrorLexico();

  public static boolean flag_invocacion = false;

  public static boolean derechaAsig = false;
  
  public static void iniciar_pila()
  {
    dir = DIRECCION_INICIAL;
  }

  public static void incrementar_pila()
  {
    dir++;
  }

  public static void main(String args []) throws ParseException, IOException
  {
    String nombreArchivo;
    String path = "C:\\Users\\Gord\\Desktop\\programas\\";
    if (args [0].equals("-v"))
    {
      System.out.println("Compilacion en modo verbose");
      nombreArchivo = args [1];
    }
    else
    {
      System.out.println("Compilacion sin modo verbose");
      nombreArchivo = args [0];
    }
    File ficheroSalida = new File("C:\\Users\\Gord\\Desktop\\programas\\" + nombreArchivo + ".code");
    FileWriter ficheroCode = new FileWriter(ficheroSalida);
    pw = new PrintWriter(ficheroCode);
    
    path += nombreArchivo + ".ml";
    System.out.println("LEYENDO FICHERO " + nombreArchivo + "\n");
    try
    {
      Compilador parser = new Compilador(new java.io.FileInputStream(path));
      tabla.inicializar_tabla();
      int res = Compilador.programa();
      if (args [0].equals("-v"))
      {
        TablaHash.mostrarTokensNormales();
        TablaHash.mostrarIdentificadores();
      }
      ficheroCode.close();
      int erroresLexicos = ErrorLexico.getNumErroresLexicos();
      int erroresSintacticos = ErrorSintactico.getNumErroresSintacticos();
      int erroresSemanticos = ErrorSemantico.getNumErroresSemanticos();
      if (erroresLexicos > 0 || erroresSintacticos > 0 || erroresSemanticos > 0)
      {
        System.out.println("Compilacion finalizada con errores");
        System.out.println("==================================");
        System.out.println("Detectados " + erroresLexicos + " errores lexicos");
        System.out.println("Detectados " + erroresSintacticos + " errores sintacticos");
        System.out.println("Detectados " + erroresSemanticos + " errores semanticos");
        ficheroSalida.delete();
      }
      else
      {
        System.out.println("Compilacion finalizada sin errores");
        System.out.println("==================================");
        System.out.println("El fichero " + nombreArchivo + " es correcto");
      }
    }
    catch (Exception e)
    {
      System.out.println("INCORRECTO");
      System.out.println(e.getMessage());
      Compilador.ReInit(System.in);
    }
    catch (Error e)
    {
      int fila = CompiladorTokenManager.input_stream.getBeginLine();
      int columna = CompiladorTokenManager.input_stream.getBeginColumn();
      String tokenMalo = CompiladorTokenManager.input_stream.GetImage();
      ErrorLexico.deteccionErrorLexico(fila, columna, tokenMalo);
    }
  }
}

PARSER_END(Compilador)

SKIP : /* CARACTERES A IGNORAR */
{
  " "
| "\r"
| "\t"
| "\n"
| "%%" : ComentLinea
}

< ComentLinea >
SKIP :
{
  "%%" : DEFAULT
}

< ComentLinea >
MORE :
{
  < ~[ ] >
}

SPECIAL_TOKEN : /* Comentario de una linea */
{
  < SINGLE_LINE_COMMENT :
    "%" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
}

TOKEN : /* OPERADORES ARITMETICOS */
{
  < tPLUS : "+" >
  {
    TablaHash.anyadirHashTokens("tPLUS");
  }
| < tMINUS : "-" >
  {
    TablaHash.anyadirHashTokens("tMINUS");
  }
| < tMULTIPLY : "*" >
  {
    TablaHash.anyadirHashTokens("tMULTIPLY");
  }
| < tDIVIDE : "/" >
  {
    TablaHash.anyadirHashTokens("tDIVIDE");
  }
| < tMAYOR : ">" >
  {
    TablaHash.anyadirHashTokens("tMAYOR");
  }
| < tMENOR : "<" >
  {
    TablaHash.anyadirHashTokens("tMENOR");
  }
| < tIGUAL : "=" >
  {
    TablaHash.anyadirHashTokens("tIGUAL");
  }
| < tMAI : ">=" >
  {
    TablaHash.anyadirHashTokens("tMAI");
  }
| < tMEI : "<=" >
  {
    TablaHash.anyadirHashTokens("tMEI");
  }
| < tNI : "<>" >
  {
    TablaHash.anyadirHashTokens("tNI");
  }
| < tOPAS : ":=" >
  {
    TablaHash.anyadirHashTokens("tOPAS");
  }
}

TOKEN : /* OPERADORES LOGICOS */
{
  < tAND : "and" >
  {
    TablaHash.anyadirHashTokens("tAND");
  }
| < tOR : "or" >
  {
    TablaHash.anyadirHashTokens("tOR");
  }
| < tNOT : "not" >
  {
    TablaHash.anyadirHashTokens("tNOT");
  }
}

TOKEN : /* PALABRAS RESERVADAS */
{
  < tPROGRAMA : "programa" >
  {
    TablaHash.anyadirHashTokens("tPROGRAMA");
  }
| < tVAR : "var" >
  {
    TablaHash.anyadirHashTokens("tVAR");
  }
| < tPRINCIPIO : "principio" >
  {
    TablaHash.anyadirHashTokens("tPRINCIPIO");
  }
| < tFIN : "fin" >
  {
    TablaHash.anyadirHashTokens("tFIN");
  }
| < tSI : "si" >
  {
    TablaHash.anyadirHashTokens("tSI");
  }
| < tENT : "ent" >
  {
    TablaHash.anyadirHashTokens("tENT");
  }
| < tSI_NO : "si_no" >
  {
    TablaHash.anyadirHashTokens("tSI_NO");
  }
| < tFSI : "fsi" >
  {
    TablaHash.anyadirHashTokens("tFSI");
  }
| < tMQ : "mq" >
  {
    TablaHash.anyadirHashTokens("tMQ");
  }
| < tFMQ : "fmq" >
  {
    TablaHash.anyadirHashTokens("tFMQ");
  }
| < tESCRIBIR : "escribir" >
  {
    TablaHash.anyadirHashTokens("tESCRIBIR");
  }
| < tLEER : "leer" >
  {
    TablaHash.anyadirHashTokens("tLEER");
  }
| < tMOD : "mod" >
  {
    TablaHash.anyadirHashTokens("tMOD");
  }
| < tDIV : "div" >
  {
    TablaHash.anyadirHashTokens("tDIV");
  }
| < tENTERO : "entero" >
  {
    TablaHash.anyadirHashTokens("tENTERO");
  }
| < tBOOLEANO : "booleano" >
  {
    TablaHash.anyadirHashTokens("tBOOLEANO");
  }
| < tCARACTER : "caracter" >
  {
    TablaHash.anyadirHashTokens("tCARACTER");
  }
| < tTRUE : "true" >
  {
    TablaHash.anyadirHashTokens("tTRUE");
  }
| < tFALSE : "false" >
  {
    TablaHash.anyadirHashTokens("tFALSE");
  }
| < tENTACAR : "entacar" >
  {
    TablaHash.anyadirHashTokens("tENTACAR");
  }
| < tCARAENT : "caraent" >
  {
    TablaHash.anyadirHashTokens("tCARAENT");
  }
| < tACCION : "accion" >
  {
    TablaHash.anyadirHashTokens("tACCION");
  }
| < tVAL : "val" >
  {
    TablaHash.anyadirHashTokens("tVAL");
  }
| < tREF : "ref" >
  {
    TablaHash.anyadirHashTokens("tREF");
  }
}

TOKEN : /*EXPRESIONES */
{
  < #tDIGITO : [ "0"-"9" ] >	
| < #tLETRA : [ "a"-"z" ] >
| < tCONSTCHAR : ("\"") (~[ "\"" ]) ("\"") >
  {
    TablaHash.anyadirHashTokens("tCONSTCHAR");
  }
| < tCONSTCAD : ("\"") (~[ "\"" ])+ ("\"") >
  {
    TablaHash.anyadirHashTokens("tCONSTCAD");
  }
| < tCONSTANTE_NUMERICA : (< tDIGITO >)+ >
  {
    TablaHash.anyadirHashTokens("tCONSTANTE_NUMERICA");
  }
| < tIDENTIFICADOR :
    (
      < tLETRA >
    | (( < tLETRA > | "_" ) (< tLETRA > | "_" | < tDIGITO > )* ( < tLETRA > | < tDIGITO >)) ) >
  {
    TablaHash.anyadirHashTokens(image.toString());
    TablaHash.anyadirHashIdentificadores(image.toString());
  }
}

TOKEN : /* OPERADORES SEPARADDORES */
{
  < tPUNTYCOM : ";" >
  {
    TablaHash.anyadirHashTokens("tPUNTYCOM");
  }
| < tCOMA : "," >
  {
    TablaHash.anyadirHashTokens("tCOMA");
  }
| < tPARENTESIS_IZDA : "(" >
  {
    TablaHash.anyadirHashTokens("tPARENTESIS_IZDA");
  }
| < tPARENTESIS_DCHA : ")" >
  {
    TablaHash.anyadirHashTokens("tPARENTESIS_DCHA");
  }
}

/* Construccion del analizador sintactico */

int programa() :
{
  Token tSim, t;
  Simbolo s;
  Simbolo.Tipo_simbolo tp_Sim;
}
{
  try
  {
    < tPROGRAMA > t = < tIDENTIFICADOR >
    {
      s = tabla.introducir_programa(t.image, dir);
      pw.println("; Programa " + t.image.toUpperCase() + ".");
      String etiquetaProg = etiq.nueva_etiqueta();
      pw.println("\t ENP  " + etiquetaProg);
    }
    < tPUNTYCOM > 
    declaracion_variables() declaracion_acciones()
    {
      pw.println("; Comienzo del programa " + t.image.toUpperCase());
      pw.println(etiquetaProg + ":");
    }
    bloque_sentencias(s)
    {
      pw.println("; Fin del programa " + t.image.toUpperCase() + ".");
      pw.println("\t LVP");
    }
    < EOF >
    {
      return 0;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
    return 1;
  }
}

void bloque_sentencias(Simbolo s) :
{
  LinkedList<Simbolo> listaAuxiliar = new LinkedList<Simbolo>();
  Simbolo par;
}
{
  try
  {
    {
      pw.println("; Accion " + s.getNombre().toUpperCase() + ".");

      if (!s.es_Simbolo_Programa())
      { 
      	pw.println(s.getEtiqueta() + ":");
      }
      listaAuxiliar = s.getLista_parametros();
      for (int j = listaAuxiliar.size() - 1; j >= 0; j--)
      {
         par = listaAuxiliar.get(j);
         pw.println("; rec. parametro " + par.getNombre().toUpperCase() + " de tipo " + par.getVariable().toString() + 
         " pasado por " + par.getParametro().toString());
         pw.println("\t SRF   " + (nivel - par.getNivel()) + "  " + par.getDir());
         pw.println("\t ASGI");
      }
    }
    < tPRINCIPIO > lista_sentencias() < tFIN >
    {
      tabla.ocultar_parametros(nivel);
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void lista_sentencias() :
{
}
{
  try
  {
    (sentencia()) +
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void sentencia() :
{
}
{
  try
  {
    leer() < tPUNTYCOM >
  | escribir() < tPUNTYCOM >
  | asig_invoc()
  | seleccion()
  | mientras_que()
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void asig_invoc() :
{
  Token t;
}
{
  try
  {
    t = < tIDENTIFICADOR > (asignacion(t)
  | invocacion_accion(t))
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void asignacion(Token t) :
{
  RegistroExp tpExp;
  Simbolo s;
  Simbolo.Tipo_variable tipo = null;
  boolean ok = true;
}
{
  try
  {
    < tOPAS >
    {
      s = tabla.buscar_simbolo(t.image);
      if (s == null)
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - Variable desconocida " + t.image + 
        " en la parte izquierda de la asignacion");
        // Tipo de simbolo desconocido
        tipo = Simbolo.Tipo_variable.DESCONOCIDO;
        ok = false;
      }
      else if (s.es_Simbolo_Parametro())
      {
        if (s.es_Parametro_Valor())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Prohibido asignar a " + s.getNombre() + 
          ", es un parametro pasado como valor");
          tipo = Simbolo.Tipo_variable.DESCONOCIDO;
          ok = false;
        }
        else
        {
          tipo = s.getVariable();
          pw.println("; Direccion del parametro por referencia " + s.getNombre().toUpperCase() + ".");
          pw.println("\t SRF   " + (nivel - s.getNivel()) + "  " + s.getDir());
          pw.println("\t DRF");
          derechaAsig = true;
        }
      }
      else if (s.es_Simbolo_Accion())
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - Prohibida la asignacion a la accion " + 
        s.getNombre());
        tipo = Simbolo.Tipo_variable.DESCONOCIDO;
        ok = false;
      }
      else
      {
        pw.println("; Direccion de la variable " + s.getNombre().toUpperCase() + ".");
        pw.println("\t SRF   " + (nivel - s.getNivel()) + "  " + s.getDir());
        tipo = s.getVariable();
        derechaAsig = true;
      }
    }
    tpExp = expresion() < tPUNTYCOM >
    {
      if (ok && tpExp.getTipo() != tipo && tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO)
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - Tipos incompatibles en la asignacion: " + 
        "no se puede convetir " + tpExp.getTipo().toString() + " a " + tipo.toString());
      }
      else
      {
        pw.println("; Asignacion.");
        pw.println("\t ASG");
      }
      derechaAsig = false;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void lista_asignables() :
{
  LinkedList < String > listaIdentificadores;
  String idActual;
}
{
  try
  {
    listaIdentificadores = identificadores()
    {
      int dimension = listaIdentificadores.size();
      Simbolo s;
      for (int i = 0; i < dimension; i++)
      {
        idActual = listaIdentificadores.get(i);
        s = tabla.buscar_simbolo(idActual);
        if (s == null)
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Identificador de asignacion " 
          + idActual + " desconocido");
        }
        else if (s.getTipo() == Simbolo.Tipo_simbolo.VARIABLE 
        || s.getVariable() == Simbolo.Tipo_variable.DESCONOCIDO)
        {
          if (s.es_Variable_Booleano() || s.es_Variable_Cadena())
          {
            ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
            ", columna " + token.beginColumn + "  - Tipo invalido de variable de lectura, se espera " + 
            "entero o caracter");
          }
          else
          {
            pw.println("; Leer variable " + s.getNombre());
            pw.println("\t SRF   " + (nivel - s.getNivel()) + "  " + s.getDir());

            if (s.getVariable() == Simbolo.Tipo_variable.ENTERO)
            { 
            	pw.println("\t RD    1");
          	}
          	else
          	{
          	  	pw.println("\t RD    0");
          	}
          }
        }
        else if (s.es_Simbolo_Parametro())
        {
          if (s.es_Parametro_Valor())
          {
            ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
            ", columna " + token.beginColumn + "  - Variable " + s.getNombre() + 
            " por valor en lectura");
          }
          else
          {
            pw.println("; Leer parametro por referencia " + s.getNombre());
            pw.println("\t SRF   " + (nivel - s.getNivel()) + "  " + s.getDir());
            pw.println("\t DRF");
            if (s.getVariable() == Simbolo.Tipo_variable.ENTERO)
            { 
            	pw.println("\t RD    1");
          	}
          	else
          	{
          	  	pw.println("\t RD    0");
          	}
          }
        }
        else if (s.es_Simbolo_Accion())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Los argumentos de una funcion solo pueden ser" + 
          " parametros o variables, encontrado " + s.getNombre() + " de tipo " + s.getTipo().toString());
        }	
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void leer() :
{
}
{
  try
  {
    < tLEER >
    {
      pw.println("; Lectura");
    }
    < tPARENTESIS_IZDA > lista_asignables() < tPARENTESIS_DCHA >
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void escribir() :
{
}
{
  try
  {
    < tESCRIBIR >
    {
      pw.println("; Escritura");
    }
    < tPARENTESIS_IZDA > lista_escribibles() < tPARENTESIS_DCHA >
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void lista_escribibles() :
{
}
{
  try
  {
    escribible() (< tCOMA > escribible()) *
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void escribible() :
{
  Token t = null;
  Simbolo s;
  RegistroExp regExp = null;
  RegistroExp result = new RegistroExp();
  boolean constCad = false, entCad = false, caracter_especial = false;
}
{
  try
  {
    (
    t = < tCONSTCHAR >
    {
      constCad = true;
    }
  | t = < tCONSTCAD >
    {
      constCad = true;
    }
  | t = < tIDENTIFICADOR >
  | < tENTACAR > < tPARENTESIS_IZDA > regExp = expresion() < tPARENTESIS_DCHA >
    {
      entCad = true;
    }
    )
    {
      if (constCad)
      {
        String cad = t.image.replace("\"", "'");
        pw.println("; cadena " + cad + ".");
        String cadena = t.image;
        int tamanyo = cadena.length();
        for (int i = 1; i < tamanyo - 1; i++)
        {
          if (cadena.charAt(i) == '\\')
          {
            caracter_especial = true;
          }
          else if ((cadena.charAt(i) == 'n') && caracter_especial)
          {
          	pw.println("\t STC   10" );
          	pw.println("\t WRT   0");
          	caracter_especial = false;
          }
          else if ((cadena.charAt(i) == 'r') && caracter_especial)
          {
          	pw.println("\t STC   13" );
          	pw.println("\t WRT   0");
          	caracter_especial = false;
          }
          else if ((cadena.charAt(i) == 't') && caracter_especial)
          {
          	pw.println("\t STC   9" );
          	pw.println("\t WRT   0");
          	caracter_especial = false;
          } 
          else
          {
            pw.println("\t STC   " + (int)cadena.charAt(i));
          	pw.println("\t WRT   0");
          	caracter_especial = false;
          }
        }
        result.setTipo(Simbolo.Tipo_variable.CADENA);
      }
      else if (entCad)
      {
        if (regExp.getTipo() != Simbolo.Tipo_variable.ENTERO)
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Se esperaba una expresion del tipo" + 
          " ENTERO en la funcion entacar. Se ha recibido una expresion de tipo " + 
          regExp.getTipo().toString());
        }
        else
        {
          if (regExp.valorEnt == RETORNO_CARRO || regExp.valorEnt == SALTO_LINEA)
          {
            pw.println("\t WRT   0");
          }
          else
          { 
          	pw.println("\t WRT   1");
          }
          result.setTipo(Simbolo.Tipo_variable.ENTERO);
        }
      }
      else
      {
        s = tabla.buscar_simbolo(t.image);
        if (s == null)
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Variable a escribir " + s.getNombre() 
          + " desconocida ");
        }
        else if (s.es_Variable_Desconocido())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Variable " + t.image + " no valida para escritura");
        }
        else
        {
          pw.println("; Acceso a la variable " + s.getNombre().toUpperCase() + ".");
          pw.println("\t SRF   " + (nivel - s.getNivel()) + "  " + s.getDir());
          pw.println("\t DRF");

          if (s.es_Simbolo_Parametro() && s.es_Parametro_Referencia())
          {
          	pw.println("\t DRF"); 
          }
          if (s.getVariable() == Simbolo.Tipo_variable.ENTERO)
          {
          	pw.println("\t WRT   1");
          }
          if (s.getVariable() == Simbolo.Tipo_variable.CHAR)
          {
            pw.println("\t WRT	 0");
          }
        }
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void invocacion_accion(Token t) :
{
  Simbolo s = null, par = null;
  boolean args = false;
}
{
try
   { 
    {
      flag_invocacion = true;
      
      s = tabla.buscar_simbolo(t.image);
      if (s == null)
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - Identificador " + t.image + 
        " desconocido en llamada a accion");
      }
      else if (!s.es_Simbolo_Accion())
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - No se puede realizar una llamada" + 
        " a una accion sobre el parametro " + t.image);
      }
    }
    (argumentos(s)
    {
      args = true;
    }
    ) ? < tPUNTYCOM >
    {
      if (s != null)
      {
        int argc = s.getLista_parametros().size();
        if (!args && argc != 0)
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + " -  Se esperaban " + argc + 
          " parametros al invocar a la accion " + s.getNombre());
        }
        else
        {
          pw.println("; Invocando a " + s.getNombre().toUpperCase());
          pw.println("\t OSF   " + (s.getDir() - 1) + "  " + (nivel - s.getNivel()) + " " + s.getEtiqueta());
        }
      }
      flag_invocacion = false;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void mientras_que() :
{
  RegistroExp tpExp;
  String etiqMQ, etiqFIN = null;
}
{
  try
  {
    < tMQ >
    {
      etiqMQ = etiq.nueva_etiqueta();
      pw.println(etiqMQ + ":");
      pw.println("; MQ.");
    }
    tpExp = expresion()
    {
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO) 
      && (tpExp.getTipo() != Simbolo.Tipo_variable.BOOLEANO))
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + " - La condicion de mientras_que debe ser booleana");
      }
      else
      {
        etiqFIN = etiq.nueva_etiqueta();
        pw.println("; Salir del bucle si la guarda se evalua a falso.");
        pw.println("\t JMF  " + etiqFIN);
      }
    }
    lista_sentencias() < tFMQ >
    {
      pw.println("; Fin de la iteracion. Saltar a la cabecera del bucle.");
      pw.println("\t JMP  " + etiqMQ);
      pw.println(etiqFIN + ":");
      pw.println("; Fin MQ");
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void argumentos(Simbolo s) :
{
  boolean ok = false;
}
{
  try
  {
    < tPARENTESIS_IZDA > (lista_expresiones(s)
    {
      ok = true;
    }
    ) ? < tPARENTESIS_DCHA >
    {
      if (s != null)
      {
        int argc = s.getLista_parametros().size();
        if (!ok && argc != 0)
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          " - Se esperaban " + argc + " parametros al invocar a la accion " + 
          s.getNombre());
        }
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void lista_expresiones(Simbolo s) :
{
  RegistroExp r;
  int argc = 0;
  boolean ok = true;
  LinkedList < Simbolo > parametros;
}
{
  try
  {
    r = expresion()
    {
      if (s != null && !s.es_Variable_Desconocido())
      {
        parametros = s.getLista_parametros();
        argc++;
        if (argc > parametros.size())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - El numero de parametros de" + 
          " llamada a la funcion " + s.getNombre() + 
          " no coindice, se esperaban " + parametros.size());
          ok = false;
        }
        else if (r.getTipo() != parametros.get(argc - 1).getVariable())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Los tipos en la llamada a la funcion " + 
          s.getNombre() + " no coindicen");
          ok = false;
        }
        else if (r.getClase() == Simbolo.Clase_parametro.VAL && !parametros.get(argc - 1).es_Parametro_Valor())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Error al pasar un parametro por valor como referencia");
          ok = false;
        }
        else if (parametros.get(argc - 1).es_Parametro_Referencia() && r.isExpr_compuesta())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - No se puede pasar al parametro por referencia " + 
          parametros.get(argc - 1).getNombre() + " una expresion compuesta");
          ok = false;
        }
        else
        {
          if (flag_invocacion && (parametros.get(argc - 1).es_Parametro_Valor())
          	  && !r.isExpr_compuesta())
          {
            pw.println("\t DRF");
          }
          ok = false;
        }	
      }
    }
    (
    < tCOMA > r = expresion()
    {
      if (s != null && !s.es_Variable_Desconocido())
      {
        parametros = s.getLista_parametros();
        argc++;
        if (argc > parametros.size())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - El numero de parametros de" + 
          " llamada a la funcion " + s.getNombre() + 
          " no coindice, se esperaban " + parametros.size());
          ok = false;
        }
        else if (r.getTipo() != parametros.get(argc - 1).getVariable())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Los tipos en la llamada a la funcion" + 
          s.getNombre() + " no coindicen");
          ok = false;
        }
        else if (r.getClase() == Simbolo.Clase_parametro.VAL && !parametros.get(argc - 1).es_Parametro_Valor())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Error al pasar un parametro por valor como referencia");
          ok = false;
        }
        else if (parametros.get(argc - 1).es_Parametro_Referencia() && r.isExpr_compuesta())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - No se puede pasar al parametro por referencia " + 
          parametros.get(argc - 1).getNombre() + " una expresion compuesta");
          ok = false;
        }
        else
        {
          ok = false;
        }
      }
    }
    ) *
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

RegistroExp expresion() :
{
  RegistroExp tpExp1 = null, tpExp2 = null;
  TipoOperador op;
  boolean ok = true;
  RegistroExp regResult = new RegistroExp();
  boolean constantes = false;
}
{
  try
  {
    tpExp1 = expresion_simple() 
    (op = operador_relacional() 
    tpExp2 = expresion_simple()
    {  
      regResult = new RegistroExp();
      if (tpExp1.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - El operador 1 debe ser entero " + 
        "caracter, cadena o booleano");
        ok = false;
      }
      if (tpExp2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - El operador 2 debe ser entero " + 
        "caracter, cadena o booleano");
        ok = false;
      }
      if (ok)
      {
        if (tpExp1.getTipo() != tpExp2.getTipo())
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Los operadores deben ser del mismo tipo " + 
          " en la expresion " + tpExp1.getTipo().toString() + " : " + tpExp2.getTipo().toString());
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
          switch (tpExp1.getTipo())
          {
            case ENTERO : 
            ok = tpExp2.getTipo() == Simbolo.Tipo_variable.ENTERO;
            regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
            if (!ok)
            {
              regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            }
            else if (tpExp1.getSimbolo() == Simbolo.Tipo_simbolo.CONST 
            && tpExp2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
              constantes = true;
              regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
              switch (op.getOperadorRelacional())
              {
                case MAYOR : 
                pw.println("\t GT");
                regResult.valorBool = tpExp1.valorEnt > tpExp2.valorEnt;
                break;
                case MAYOR_IGUAL : 
                pw.println("\t GTE");
                regResult.valorBool = tpExp1.valorEnt >= tpExp2.valorEnt;
                break;
                case IGUAL : 
                pw.println("\t EQ");
                regResult.valorBool = tpExp1.valorEnt == tpExp2.valorEnt;
                break;
                case NO_IGUAL : 
                pw.println("\t NEQ");
                regResult.valorBool = tpExp1.valorEnt != tpExp2.valorEnt;
                break;
                case MENOR_IGUAL : 
                pw.println("\t LTE");
                regResult.valorBool = tpExp1.valorEnt <= tpExp2.valorEnt;
                break;
                case MENOR : 
                pw.println("\t LT");
                regResult.valorBool = tpExp1.valorEnt < tpExp2.valorEnt;
                break;
                default : 
                break;
              }
            }
            else
            {
              switch (op.getOperadorRelacional())
              {
                case MAYOR : 
                pw.println("\t GT");
                break;
                case MAYOR_IGUAL : 
                pw.println("\t GTE");
                break;
                case IGUAL : 
                pw.println("\t EQ");
                break;
                case NO_IGUAL : 
                pw.println("\t NEQ");
                break;
                case MENOR_IGUAL : 
                pw.println("\t LTE");
                break;
                case MENOR : 
                pw.println("\t LT");
                break;
                default : 
                break;
              }
            }
            break;
            case CHAR : 
            regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
            ok = tpExp2.getTipo() == Simbolo.Tipo_variable.CHAR;
            if (!ok)
            {
              regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            }
            else if (tpExp1.getSimbolo() == Simbolo.Tipo_simbolo.CONST 
            && tpExp2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
              constantes = true;
              switch (op.getOperadorRelacional())
              {          
                case IGUAL : 
                pw.println("\t EQ");
                regResult.valorBool = tpExp1.valorString.equals(tpExp2.valorString);
                break;
                case NO_IGUAL : 
                pw.println("\t NEQ");
                regResult.valorBool = !tpExp1.valorString.equals(tpExp2.valorString);
                case MAYOR_IGUAL : 
                pw.println("\t GTE");
                regResult.valorBool = tpExp1.valorString.charAt(0) >= tpExp2.valorString.charAt(0);
                break;
                case MAYOR : 
                pw.println("\t GT");
                regResult.valorBool = tpExp1.valorString.charAt(0) > tpExp2.valorString.charAt(0);
                case MENOR : 
                pw.println("\t LTE");
                regResult.valorBool = tpExp1.valorString.charAt(0) <= tpExp2.valorString.charAt(0);
                break;
                case MENOR_IGUAL : 
                pw.println("\t LT");
                regResult.valorBool = tpExp1.valorString.charAt(0) <= tpExp2.valorString.charAt(0);
                break;
                default : 
                ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
                ", columna " + token.beginColumn + "  - No se puede" + 
                " utilizar el operador relacional " + op.getOperadorRelacional().toString() + 
                " sobre caracteres");
              }
            }
            else
            {
              switch (op.getOperadorRelacional())
              {
                case IGUAL : 
                pw.println("\t EQ");	
                break;
                case NO_IGUAL : 
                pw.println("\t NEQ");
                break;
                case MAYOR : 
                pw.println("\t GT");	
                break;
                case MAYOR_IGUAL : 
                pw.println("\t GTE");
                break;
                case MENOR : 
                pw.println("\t LT");	
                break;
                case MENOR_IGUAL : 
                pw.println("\t LTE");
                break;
                default : 
                ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
                ", columna " + token.beginColumn + "  - No se puede" + 
                " utilizar el operador relacional " + op.getOperadorRelacional().toString() + 
                " sobre caracteres");
              }
            }
            break;
            case BOOLEANO :          
            regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
            ok = tpExp2.getTipo() == Simbolo.Tipo_variable.BOOLEANO;
            if (!ok)
            {
              regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            }
            else if (tpExp1.getSimbolo() == Simbolo.Tipo_simbolo.CONST 
            && tpExp2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
              constantes = true;
              switch (op.getOperadorRelacional())
              {
                case IGUAL : 
                regResult.valorBool = tpExp1.valorBool == tpExp2.valorBool;
                pw.println("\t EQ");
                break;
                case NO_IGUAL : 
                pw.println("\t NEQ");
                regResult.valorBool = tpExp1.valorBool != tpExp2.valorBool;
                break;
                default : 
                ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
                ", columna " + token.beginColumn + "  - No se puede" + 
                " utilizar el operador " + op.getOperadorRelacional().toString() + 
                " sobre una booleano");
              }
            }
            else
            {
              switch (op.getOperadorRelacional())
              {
                case IGUAL : 
                pw.println("\t EQ");
                break;
                case NO_IGUAL : 
                pw.println("\t NEQ");	
                break;
                default : 
                ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
                ", columna " + token.beginColumn + "  - No se puede" + 
                " utilizar el operador relacional " + op.getOperadorRelacional().toString() + 
                " sobre caracteres");
              }
            }
            break;
            case DESCONOCIDO : 
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
            break;
            default : 
            ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
            ", columna " + token.beginColumn + "  - El operador relacional es" + 
            " desconocido");
          }
        }
        if (ok && !constantes)
        {
          regResult.setExpr_compuesta(true);
        }
      }
    }
    ) *
    {
      if (tpExp2 == null)
      {
        return tpExp1;
      }
      else
      {
        return regResult;
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

TipoOperador operador_relacional() :
{
  TipoOperador op = new TipoOperador();
}
{
  try
  {
    < tIGUAL >
    {
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.IGUAL);
      return op;
    }
  | < tMENOR >
    {
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MENOR);
      return op;
    }
  | < tMEI >
    {
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MENOR_IGUAL);
      return op;
    }
  | < tNI >
    {
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.NO_IGUAL);
      return op;
    }
  | < tMAI >
    {
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MAYOR_IGUAL);
      return op;
    }
  | < tMAYOR >
    {
      op.setOperadorRelacional(TipoOperador.Tipo_Operador_Relacional.MAYOR);
      return op;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

TipoOperador operador_aditivo() :
{
  TipoOperador op = new TipoOperador();
}
{
  try
  {
    < tPLUS >
    {
      op.setOperadorAditivo(TipoOperador.Tipo_Operador_Aditivo.SUMA);
      return op;
    }
  | < tMINUS >
    {
      op.setOperadorAditivo(TipoOperador.Tipo_Operador_Aditivo.RESTA);
      return op;
    }
  | < tOR >
    {
      op.setOperadorAditivo(TipoOperador.Tipo_Operador_Aditivo.OR);
      return op;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

RegistroExp expresion_simple() :
{
  RegistroExp regTerm1 = null, regTerm2 = null, regResult = null;
  TipoOperador op;
  boolean ok;
  boolean constantes = false;
}
{
  try
  {
    regTerm1 = termino() 
    (
    op = operador_aditivo() 
    regTerm2 = termino()
    {
      regResult = new RegistroExp();
      ok = true;
      if (op.getOperadorAditivo() == TipoOperador.Tipo_Operador_Aditivo.OR)
      {
        ok = regTerm1.getTipo() == Simbolo.Tipo_variable.BOOLEANO 
        && regTerm2.getTipo() == Simbolo.Tipo_variable.BOOLEANO;
        if (!ok)
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " + 
          regTerm1.getTipo().toString() + " y " + regTerm2.getTipo().toString());
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          if (regTerm1.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO 
          || regTerm2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
          {
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
          }
          else
          {
           	regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
            pw.println("\t OR");
            if (regTerm1.getSimbolo() == Simbolo.Tipo_simbolo.CONST 
            && regTerm2.getSimbolo() != Simbolo.Tipo_simbolo.CONST)
            {
              constantes = true;
              regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
              regResult.valorBool = regTerm1.valorBool
            | regTerm2.valorBool;
            }
          }
        }
      }
      else
      {
        ok = regTerm1.getTipo() == Simbolo.Tipo_variable.ENTERO 
        && regTerm2.getTipo() == Simbolo.Tipo_variable.ENTERO;
        if (!ok)
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " + 
          regTerm1.getTipo().toString() + " y " + regTerm2.getTipo().toString());
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else if (regTerm1.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO 
        && regTerm2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
        {
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          regResult.setTipo(Simbolo.Tipo_variable.ENTERO);
          if (DesbordamientoEnteros.hayDesbordamientoEntero(regTerm1.getValorEnt()) 
          || DesbordamientoEnteros.hayDesbordamientoEntero(regTerm2.getValorEnt()))
          {
            ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
            ", columna " + token.beginColumn + "  - Valor fuera del rango");
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
          }
          else
          {
            if (regTerm1.getSimbolo() == Simbolo.Tipo_simbolo.CONST 
            && regTerm2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
              constantes = true;
              regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
              switch (op.getOperadorAditivo())
              {
                case SUMA : 
                pw.println("\t PLUS");
                regResult.valorEnt = regTerm1.valorEnt + regTerm2.valorEnt;
                break;
                case RESTA : 
                pw.println("\t SBT");
                regResult.valorEnt = regTerm1.valorEnt - regTerm2.valorEnt;
                break;
                default : 
                ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
                ", columna " + token.beginColumn + "  - Operador aditivo desconocido");
              }
            }
            else
            {
              switch (op.getOperadorAditivo())
              {
                case SUMA : 
                pw.println("\t PLUS");	
                break;
                case RESTA : 
                pw.println("\t SBT");	
                break;
                default : 
                ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
                ", columna " + token.beginColumn + "  - Operador aditivo desconocido");
              }
            }
          }
        }
      }
      if (ok && !constantes)
      {
        regResult.setExpr_compuesta(true);
      }
    }
    ) *
    {
      if (regTerm2 == null)
      {
        return regTerm1;
      }
      else
      {
        return regResult;
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

RegistroExp termino() :
{
  RegistroExp tpFactor1 = null, tpFactor2 = null, regResult = null;
  TipoOperador op;
  boolean ok;
  boolean constantes = false;
}
{
  try
  {
    tpFactor1 = factor() 
    (
    op = operador_multiplicativo() 
    tpFactor2 = factor()
    {
      regResult = new RegistroExp();
      if (op.getOperadorMultiplicativo() == TipoOperador.Tipo_Operador_Multiplicativo.AND)
      {
        ok = tpFactor1.getTipo() == Simbolo.Tipo_variable.BOOLEANO 
        && tpFactor2.getTipo() == Simbolo.Tipo_variable.BOOLEANO;
        if (!ok)
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " + 
          tpFactor1.getTipo().toString() + " y " + tpFactor2.getTipo().toString());
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else if (tpFactor2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO 
        || tpFactor2.getTipo() == Simbolo.Tipo_variable.DESCONOCIDO)
        {
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          regResult.setTipo(Simbolo.Tipo_variable.BOOLEANO);
          pw.println("\t AND");
          if (tpFactor1.getSimbolo() == Simbolo.Tipo_simbolo.CONST 
          && tpFactor2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
          {
            regResult.valorBool = tpFactor1.valorBool & tpFactor2.valorBool;
            regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
          }
        }
      }
      else
      {
        ok = tpFactor1.getTipo() == Simbolo.Tipo_variable.ENTERO 
        && tpFactor2.getTipo() == Simbolo.Tipo_variable.ENTERO;
        if (!ok)
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Incompatibilidad de expresiones en operacion: " + 
          tpFactor1.getTipo().toString() + " y " + tpFactor2.getTipo().toString());
          regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
        }
        else
        {
          regResult.setTipo(Simbolo.Tipo_variable.ENTERO);
          if (DesbordamientoEnteros.hayDesbordamientoEntero(tpFactor1.valorEnt) 
          || DesbordamientoEnteros.hayDesbordamientoEntero(tpFactor2.valorEnt))
          {
            ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
            ", columna " + token.beginColumn + "  - Valor fuera del rango");
            regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
          }
          else
          {
            if (tpFactor1.getSimbolo() == Simbolo.Tipo_simbolo.CONST 
            && tpFactor2.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
            {
              constantes = true;
              regResult.setSimbolo(Simbolo.Tipo_simbolo.CONST);
              switch (op.getOperadorMultiplicativo())
              {
                case MULTIPLICACION : 
                pw.println("\t TMS");
                regResult.valorEnt = tpFactor1.valorEnt * tpFactor2.valorEnt;
                break;
                case DIVISION : 
                pw.println("\t DIV");
                if (tpFactor2.valorEnt == 0)
                {
                  ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
                  ", columna " + token.beginColumn + "  - Division por 0");					
                  regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);				
                }
                else
                {
                  regResult.valorEnt = tpFactor1.valorEnt / tpFactor2.valorEnt;
                }
                break;
                case MOD : 
                pw.println("\t MOD");
                if (tpFactor2.valorEnt == 0)
                {
                  ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
                  ", columna " + token.beginColumn + "  - Modulo por 0");					
                  regResult.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);		
                }
                else
                {
                  regResult.valorEnt = tpFactor1.valorEnt % tpFactor2.valorEnt;
                }
                break;
                default : 
                ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
                ", columna " + token.beginColumn + "  - Operador multiplicativo desconocido");					
              }
            }
            else
            {
              switch (op.getOperadorMultiplicativo())
              {
                case MULTIPLICACION : 
                pw.println("\t TMS");
                break;
                case DIVISION : 
                pw.println("\t DIV");
                break;
                case MOD : 
                pw.println("\t MOD");
                break;
                default : 
                ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
                ", columna " + token.beginColumn + "  - Operador multiplicativo desconocido");					
              }
            }
          }
        }
      }
      if (ok && !constantes)
      {
        regResult.setExpr_compuesta(true);
      }
    }
    ) *
    {
      if (tpFactor2 == null)
      {
        return tpFactor1;
      }
      else
      {
        return regResult;
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

TipoOperador operador_multiplicativo() :
{
  TipoOperador op = new TipoOperador();
}
{
  try
  {
    < tMULTIPLY >
    {
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.MULTIPLICACION);
      return op;
    }
  | < tDIVIDE >
    {
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.DIVISION);
      return op;
    }
  | < tDIV >
    {
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.DIVISION);
      return op;
    }
  | < tMOD >
    {
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.MOD);
      return op;
    }
  | < tAND >
    {
      op.setOperadorMultiplicativo(TipoOperador.Tipo_Operador_Multiplicativo.AND);
      return op;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

RegistroExp factor() :
{
  RegistroExp tpFactor, tpExp;
  RegistroExp result = new RegistroExp();
  Token t;
}
{
  try
  {
    < tNOT > tpFactor = factor()
    {
      if ((tpFactor.getTipo() != Simbolo.Tipo_variable.BOOLEANO) 
      && (tpFactor.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - Tipo " + tpFactor.getTipo() + " incompatible con " + 
        " operador <>. Se esperaba BOOLEANO ");
        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
        pw.println("\t NGB");
        result.setTipo(Simbolo.Tipo_variable.BOOLEANO);
      }
      return result;
    }
  | < tMINUS > tpFactor = factor()
    {
      if ((tpFactor.getTipo() != Simbolo.Tipo_variable.ENTERO) 
      && (tpFactor.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - Tipo " + tpFactor.getTipo().toString() + 
        " incompatible con operador -. Se esperaba ENTERO");
        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
        pw.println("\t NGBI");
        result.setTipo(Simbolo.Tipo_variable.ENTERO);
      }
      return result;
    }
  | < tPARENTESIS_IZDA > tpExp = expresion() < tPARENTESIS_DCHA >
    {
      return tpExp;
    }
  | t = < tENTACAR > < tPARENTESIS_IZDA > tpExp = expresion() < tPARENTESIS_DCHA >
    {
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.ENTERO) 
      && (tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - Argumento de tipo " + tpExp.getTipo().toString() + 
        " incompatible en funcion ENTACAR. Se esperaba ENTERO");
        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
        int valor = tpExp.getValorEnt();
        if (ErrorSemantico.hayDesbordamientoEntacar(valor))
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - La operacion ENTACAR debe recibir un par\u00e1metro " + 
          "del tipo entero comprendido entre 0 y 255");
        }
        else
        {
          if (tpExp.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
          {
            result.setValorString(String.valueOf((char) valor));
            result.setTipo(Simbolo.Tipo_variable.CHAR);
          }
          result.setTipo(Simbolo.Tipo_variable.CHAR);
        }
      }
      return result;
    }
  | < tCARAENT > < tPARENTESIS_IZDA > tpExp = expresion() < tPARENTESIS_DCHA >
    {
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.CHAR) 
      && (tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO))
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - Argumento de tipo " + tpExp.getTipo().toString() + 
        " incompatible en funcion CARAENT. Se esperaba CARACTER");
        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
        if (tpExp.getSimbolo() == Simbolo.Tipo_simbolo.CONST)
        {
          char cadena = tpExp.valorString.charAt(0);
          result.setValorEnt((int) cadena);
        }
        result.setTipo(Simbolo.Tipo_variable.ENTERO);
      }
      return result;
    }
  | t = < tIDENTIFICADOR >
    {	
      Simbolo s;
      s = tabla.buscar_simbolo(t.image);
      if (s == null)
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - Variable " + t.image + " no definida");
        tabla.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, 0);
        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);		
      }
      else if (s.es_Simbolo_Accion())
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - La accion " + s.getNombre() + " no puede " + 
        " formar parte de una expresion");
        tabla.introducir_variable(t.image, Simbolo.Tipo_variable.DESCONOCIDO, nivel, 0);
        result.setTipo(Simbolo.Tipo_variable.DESCONOCIDO);
      }
      else
      {
        result.setTipo(s.getVariable());
        result.setClase(s.getParametro());
        pw.println("; Acceso a la variable " + s.getNombre().toUpperCase() + ".");
        pw.println("\t SRF   " + (nivel - s.getNivel()) + "  " + s.getDir());
        
        if (flag_invocacion)
        {
          	if (s.es_Simbolo_Parametro() && s.es_Parametro_Valor())
          	{
		  		pw.println("\t DRF");
		 	}
		}
		else
		{
		   	pw.println("\t DRF");
		   	if (derechaAsig && s.es_Simbolo_Parametro() && s.es_Parametro_Referencia())
		   	{
		   	    pw.println("\t DRF");	
		   	}
		}
      }
      return result;	
    }
  | t = < tCONSTANTE_NUMERICA >
    {
      int valor = Integer.parseInt(t.image);
      result.setValorEnt(valor);
      result.setTipo(Simbolo.Tipo_variable.ENTERO);
      result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
      pw.println("\t STC   " + t.image);
      return result;
    }
  | t = < tCONSTCHAR >
    {
      if (t.image.length() > 3)
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - No se puede usar el caracter " + t.image + 
        " en una expresion");
      }
      else
      {
        result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
        result.valorString = String.valueOf(t.image.charAt(1));
      }
      pw.println("\t STC   " + t.image);
      result.setTipo(Simbolo.Tipo_variable.CHAR);
      return result;
    }
  | t = < tCONSTCAD >
    {
      if (t.image.length() > 3)
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - No se puede usar la cadena " + t.image + 
        " en una expresion");		
      }
      else
      {
        result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
        result.valorString = String.valueOf(t.image.charAt(1));
      }
      pw.println("\t STC   " + t.image);
      result.setTipo(Simbolo.Tipo_variable.CADENA);
      return result;
    }
  | < tTRUE >
    {
      result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
      result.setValorBool(true);
      result.setTipo(Simbolo.Tipo_variable.BOOLEANO);
      pw.println("\t STC   1");
      return result;
    }
  | < tFALSE >
    {
      result.setSimbolo(Simbolo.Tipo_simbolo.CONST);
      result.setValorBool(false);
      result.setTipo(Simbolo.Tipo_variable.BOOLEANO);
      pw.println("\t STC   0");
      return result;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void seleccion() :
{
  RegistroExp tpExp;
  String etiqSINO = null, etiqFIN;
}
{
  try
  {
    < tSI >
    {
      pw.println("; SI.");
    }
    tpExp = expresion()
    {
      if ((tpExp.getTipo() != Simbolo.Tipo_variable.DESCONOCIDO) 
      && (tpExp.getTipo() != Simbolo.Tipo_variable.BOOLEANO))
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - La condicion en la seleccion debe ser un booleano");
      }
      else
      {
        etiqSINO = etiq.nueva_etiqueta();
        pw.println("\t JMF " + etiqSINO);
      }
    }
    < tENT >
    {
      pw.println("; ENT.");
    }
    lista_sentencias()
    {
      etiqFIN = etiq.nueva_etiqueta();
      pw.println("\t JMP " + etiqFIN);
      pw.println(etiqSINO + ":");
    }
    (
    < tSI_NO >
    {
      pw.println("; SI_NO.");
    }
    lista_sentencias()
    ) ? 
    < tFSI >
    {
      pw.println(etiqFIN + ":");
      pw.println("; Fin SI");
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void declaracion_acciones() :
{
}
{
  try
  {
    (declaracion_accion()) *
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

void declaracion_accion() :
{
  Simbolo s;
}
{
  try
  {
    s = cabecera_accion() < tPUNTYCOM > declaracion_variables() declaracion_acciones() bloque_sentencias(s)
    {
      dir = s.getDir(); 
      pw.println("; Fin de la accion / funcion " + s.getNombre().toUpperCase() + ".");
      pw.println("\t CSF");
      
      tabla.eliminar_variables(nivel);
      tabla.eliminar_acciones(nivel);
      tabla.eliminar_parametros_ocultos(nivel);
      nivel--;

      incrementar_pila();
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

Simbolo cabecera_accion() :
{
  Token tId = null;
  Simbolo s, sAccion = null;
  Simbolo.Tipo_simbolo tp_Sim;
  boolean ok = false;
  LinkedList < LinkedList < Simbolo > > listaDeParametros = new LinkedList < LinkedList < Simbolo > > ();
  LinkedList < Simbolo > listaAuxiliar = new LinkedList < Simbolo > ();
}
{
  try
  {
    < tACCION > tId = < tIDENTIFICADOR >
    {
      s = tabla.buscar_simbolo(tId.image);
      if ((s == null) || (s.getNivel() != nivel))
      {
        s = tabla.introducir_accion(tId.image, nivel, dir);       
        ok = true;
        String etiqAccion = etiq.nueva_etiqueta();
        s.setEtiqueta(etiqAccion);
      }
      else
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - Accion " + s.getNombre() + " duplicada");
        ok = false;
      }
      nivel++;
      iniciar_pila();
      sAccion = s;
    }
    listaDeParametros = parametros_formales(tId)
    {
      if (ok)
      {
        for (int i = 0; i < listaDeParametros.size(); i++)
        {
          s.anyadirParametrosAccion(listaDeParametros.get(i), dir);
          incrementar_pila();
        }     
        tabla.limpiarListaParametros();
      }
      return sAccion;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

LinkedList < LinkedList < Simbolo > > parametros_formales(Token t) :
{
  LinkedList < LinkedList < Simbolo > > parametros = new LinkedList < LinkedList < Simbolo > > ();
}
{
  try
  {
    (parametros = lista_parametros()
    {
      tabla.asignarListaParametros(parametros);
    }
    ) ?
    {
      return tabla.getListasParametros();
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

LinkedList < LinkedList < Simbolo > > lista_parametros() :
{
  LinkedList < LinkedList < Simbolo > > listaGlobal = new LinkedList < LinkedList < Simbolo > > ();
  LinkedList < Simbolo > lista = new LinkedList < Simbolo > ();
}
{
  try
  {
    < tPARENTESIS_IZDA > 
    (lista = parametros()
    {
      listaGlobal.add(lista);		
    }
    (< tPUNTYCOM > lista = parametros()
    {
      listaGlobal.add(lista);
    }
    ) * < tPARENTESIS_DCHA >
    {
      return listaGlobal;
    }
  | < tPARENTESIS_DCHA >
    {
      return listaGlobal;
    }
    )
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

LinkedList < Simbolo > parametros() :
{
  Simbolo s;
  Simbolo.Clase_parametro cl_Param;
  Simbolo.Tipo_variable tipo_Var;
  LinkedList < Simbolo > lista = new LinkedList < Simbolo > ();
  LinkedList < String > listaIdentificadores = new LinkedList < String > ();
}
{
  try
  {
    cl_Param = clase_parametros() 
    tipo_Var = tipos_variables() 
    listaIdentificadores = identificadores()
    {
      int dimension = listaIdentificadores.size();
      String identificadorActual;
      for (int i = 0; i < dimension; i++)
      {
        identificadorActual = listaIdentificadores.get(i);  
        s = tabla.introducir_parametro(identificadorActual, tipo_Var, cl_Param, nivel, dir);
        if (s != null)
        {
          lista.add(s);
        }
        else
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Parametro repetido " + identificadorActual);
        }
      }
      return lista;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

int declaracion_variables() :
{
  Token t;
  int total = 0, aux = 0;
}
{
  try
  {
    (aux = declaracion() t = < tPUNTYCOM >
    {
      total += aux;
    }
    ) *
    {
      return total;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

Simbolo.Tipo_variable tipos_variables() :
{
  Token t;
}
{
  try
  {
    (t = < tENTERO > | t = < tCARACTER >| t = < tBOOLEANO > )
    {
      switch (t.kind)
      {
        case tENTERO : 
        return Simbolo.Tipo_variable.ENTERO;
        break;
        case tCARACTER : 
        return Simbolo.Tipo_variable.CHAR;
        break;
        case tCONSTCAD : 
        return Simbolo.Tipo_variable.CADENA;
        break;
        case tBOOLEANO : 
        return Simbolo.Tipo_variable.BOOLEANO;
        break;
        default : 
        return Simbolo.Tipo_variable.DESCONOCIDO;
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

int declaracion() :
{
  Token t;
  Simbolo.Tipo_variable tp_Var;
  LinkedList < String > lista = new LinkedList < String > ();
  String identificadorActual;
  Simbolo s;
}
{
  try
  {
    tp_Var = tipos_variables() 
    lista = identificadores()
    {
      int dimension = lista.size();
      for (int i = 0; i < dimension; i++)
      {
        identificadorActual = lista.get(i);
        s = tabla.introducir_variable(identificadorActual, tp_Var, nivel, dir);
        if (i <= dimension - 1)
        {
          incrementar_pila();
        }
        if (s == null)
        {
          ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
          ", columna " + token.beginColumn + "  - Variable repetida " + identificadorActual);
        }
      }
      return lista.size();
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

LinkedList < String > identificadores() :
{
  Token t;
  LinkedList < String > listaIdentificadores = new LinkedList < String > ();
}
{
  try
  {
    t = < tIDENTIFICADOR >
    {
      listaIdentificadores.add(t.image);
    }
    (< tCOMA > t = < tIDENTIFICADOR >
    {
      listaIdentificadores.add(t.image);
    }
    ) *
    {
      return listaIdentificadores;
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}

Simbolo.Clase_parametro clase_parametros() :
{
  Token t;
}
{
  try
  {
    ( t = < tVAL > | t = < tREF > )
    {
      if (t.kind == tVAL)
      {
        return Simbolo.Clase_parametro.VAL;
      }
      else if (t.kind == tREF)
      {
        return Simbolo.Clase_parametro.REF;
      }
      else
      {
        ErrorSemantico.deteccionErrorSemantico("linea " + token.beginLine + 
        ", columna " + token.beginColumn + "  - La clase de parametro no es correcta");
      }
    }
  }
  catch (ParseException e)
  {
    ErrorSintactico.deteccionErrorSintactico(e);
  }
}
